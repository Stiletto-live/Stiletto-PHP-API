<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;
use OpenAPIServer\Api\AbstractDefaultApi;

class DefaultApi extends AbstractDefaultApi
{

    public function clans(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIddiscordbot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdmembers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdmembersmemberid(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdrelationships(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdrelationshipsid(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdrequestid(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function clansclanIdrequests(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function maps(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function mapsmapId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function mapsmapIdresources(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function mapsmapIdresourcesresourceId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotClansDiscordidTech(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsbotclansdiscordidmembers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsbotclansdiscordidrelationships(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotConfig(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotConfigDiscordid(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotUsers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotWalkers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsBotWalkersWalkerId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsClansClanIdMembersMemberidPermisions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsClansClanidTech(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsClusters(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsRecipes(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsRecipesRecipeToken(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsTrades(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsTradesTradeId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsUsersAuth(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsUsersDiscordidTech(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsWalkers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsWalkersAuth(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function optionsWalkersWalkerId(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function users(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }

    public function usersdiscordid(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        return $response;
    }
}
