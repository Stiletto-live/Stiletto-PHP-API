<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;
use OpenAPIServer\Api\AbstractTradesApi;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;

class TradesApi extends AbstractTradesApi
{

    /**
     * POST createTrade
     * Summary: Create new trade
     * Notes: Create a trade
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function createTrade(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $amount = (key_exists('amount', $queryParams)) ? $queryParams['amount'] : 0;
        $quality = (key_exists('quality', $queryParams)) ? $queryParams['quality'] : 0;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        $price = (key_exists('price', $queryParams)) ? $queryParams['price'] : 0;
        
        $userdata = $request->getAttribute('authenticated_user');
        if ($userdata != null) {
            if ($resource != null && ($type == 'Supply' || $type == 'Demand') && strlen($resource) < 100) {
                try {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    if ($region != null) {
                        $stmt = $dbh->prepare("select * FROM clusters WHERE CONCAT_WS('-', region, name) = :region");
                        $stmt->bindParam(':region', $region, PDO::PARAM_STR);
                        $stmt->setFetchMode(PDO::FETCH_ASSOC);
                        $stmt->execute();
                        if ($stmt->rowCount() > 0) {
                        } else {
                            $region = 'EU-Official';
                        }
                    } else {
                        $region = 'EU-Official';
                    }

                    $amount = intval($amount);
                    if ($amount < 0) { $amount = 0; }
                    $quality = intval($quality);
                    if ($quality < 0) { $quality = 0; }
                    $price = intval($price);
                    if ($price < 0) { $price = 0; }

                    $stmt = $dbh->prepare("insert into trades(discordid,type,resource,amount,quality,region,price) values(:discordid,:type,:resource,:amount,:quality,:region,:price)");
                    $stmt->bindParam(':discordid', $userdata['discordid']);
                    $stmt->bindParam(':type', $type);
                    $stmt->bindParam(':resource', $resource);
                    $stmt->bindParam(':amount', $amount);
                    $stmt->bindParam(':quality', $quality);
                    $stmt->bindParam(':region', $region);
                    $stmt->bindParam(':price', $price);
                    $stmt->execute();
    
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Trade created')));
                    return $response->withStatus(201);
                } catch (PDOException $e){
                    return $response->withStatus(503);
                }
            } else {
                return $response->withStatus(400);
            }
        }
        return $response->withStatus(401);
    }

    /**
     * POST createTradefromBot
     * Summary: createTrade
     * Notes: Create a trade
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createTradefromBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordid = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $amount = (key_exists('amount', $queryParams)) ? $queryParams['amount'] : 0;
        $quality = (key_exists('quality', $queryParams)) ? $queryParams['quality'] : 0;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        $price = (key_exists('price', $queryParams)) ? $queryParams['price'] : 0;
        
        if ($discordid != null) {
            if ($resource != null && $region != null && ($type == 'Supply' || $type == 'Demand')){
                try {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    if ($region != null) {
                        $stmt = $dbh->prepare("select * FROM clusters WHERE CONCAT_WS('-', region, name) = :region");
                        $stmt->bindParam(':region', $region, PDO::PARAM_STR);
                        $stmt->setFetchMode(PDO::FETCH_ASSOC);
                        $stmt->execute();
                        if ($stmt->rowCount() > 0) {
                        } else {
                            $region = 'EU-Official';
                        }
                    } else {
                        $region = 'EU-Official';
                    }
    
                    $stmt = $dbh->prepare("insert into trades(discordid,type,resource,amount,quality,region,price) values(:discordid,:type,:resource,:amount,:quality,:region,:price)");
                    $stmt->bindParam(':discordid', $discordid);
                    $stmt->bindParam(':type', $type);
                    $stmt->bindParam(':resource', $resource);
                    $stmt->bindParam(':amount', $amount);
                    $stmt->bindParam(':quality', $quality);
                    $stmt->bindParam(':region', $region);
                    $stmt->bindParam(':price', $price);
                    $stmt->execute();
    
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Trade created')));
                    return $response->withStatus(201);
                } catch (PDOException $e){
                    return $response->withStatus(503);
                }
            } else {
                return $response->withStatus(400);
            }
        }
        return $response->withStatus(400);
    }

    /**
     * DELETE deleteTrade
     * Summary: Delete the trade
     * Notes: Remove an trade
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteTrade(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $tradeId = $args['tradeId'];
        $queryParams = $request->getQueryParams();
        
        $userdata = $request->getAttribute('authenticated_user');
        if ($userdata != null && $tradeId != null) {
            try {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $tradeId = intval($tradeId);

                $stmt = $dbh->prepare("delete from trades where idtrade=:tradeid and discordid=:discordid");
                $stmt->bindParam(':discordid', $userdata['discordid']);
                $stmt->bindParam(':tradeid', $tradeId);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'Trade deleted')));
                return $response->withStatus(204);
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
        }
        return $response->withStatus(401);
    }

    /**
     * GET getTrades
     * Summary: Return all trades in a list
     * Notes: Returns all trades
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getTrades(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : 1;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : 20;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;

        try {
            if ($pageSize < 0) {
                $pageSize = 10;
            }
            if ($page < 0) {
                $page = 1;
            }

            $offset = ((int) $pageSize * ((int) $page-1));
            $pageize = (int) $pageSize;

            $connection = new BDConnection();
            $dbh = $connection->getCon();

            $sql = "select trades.idtrade, trades.discordid, trades.type, trades.resource, trades.amount, trades.quality, trades.region, trades.price, users.nickname, users.discordtag from trades, users where trades.discordid=users.discordID";

            if ($type != null) {
                $sql .= " and trades.type like :type";
            }
            if ($resource != null) {
                $sql .= " and trades.resource like :resource";
            }
            if ($region != null) {
                $sql .= " and trades.region like :region";
            }

            $sql = $sql." LIMIT :pagesize OFFSET :page";

            $stmt = $dbh->prepare($sql);

            if ($type != null) {
                $stmt->bindParam(':type', $type);
            }
            if ($resource != null) {
                $stmt->bindParam(':resource', $resource);
            }
            if ($region != null) {
                $stmt->bindParam(':region', $region);
            }

            $stmt->bindParam(':pagesize', $pageize, PDO::PARAM_INT);
            $stmt->bindParam(':page', $offset, PDO::PARAM_INT);

            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }
}
