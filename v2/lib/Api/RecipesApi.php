<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.1
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use OpenAPIServer\Api\AbstractRecipesApi;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;
use \MongoDB\Client as Mongo;


class RecipesApi extends AbstractRecipesApi
{

    /**
     * POST addRecipe
     * Summary: addRecipe
     * Notes: Add a list of recipes that can then be shared.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addRecipe(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $items = (key_exists('items', $queryParams)) ? $queryParams['items'] : null;

        if ($items != null) {
            try {
                $client = new Mongo('mongodb+srv://'.$_ENV['MONGO_USERNAME'].':'.$_ENV['MONGO_PASSWORD'].'@'.$_ENV['MONGO_HOST']);
                $collection = $client->lastoasis->recipes;
                $search = $collection->findOne(array('recipe' => $items));

                if (!empty($search) && !empty($search['_id'])) {
                    $id = (string) $search['_id'];
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('token' => $id, 'items' => $items)));
                    return $response->withStatus(201);
                } else {
                    $datetime = date_create()->format('Y-m-d');
                    $insertResult = $collection->insertOne(['recipe'=> $items, 'creation_date' => $datetime]);

                    $result = $collection->findOne(array('recipe' => $items));

                    $id = (string) $result['_id'];

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('token' => $id, 'items' => $items)));
                    return $response->withStatus(201);
                }
            } catch (Exception $e){
                return $response->withStatus(503);
            }
        }
        $body = $response->getBody();
        $body->rewind();
        $body->write(json_encode(array('Error' => 'Some data are missing')));
        return $response->withStatus(400);

    }

    /**
     * GET getRecipe
     * Summary: getRecipe
     * Notes: Returns an array with all the items of that recipe
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getRecipe(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $recipeToken = $args['recipeToken'];
        
        if ($recipeToken != null) {
            try {
                $client = new Mongo('mongodb+srv://'.$_ENV['MONGO_USERNAME'].':'.$_ENV['MONGO_PASSWORD'].'@'.$_ENV['MONGO_HOST']);
                $collection = $client->lastoasis->recipes;
                $search = $collection->findOne(['_id' => (new \MongoDB\BSON\ObjectId($recipeToken))]);
    
                if ($search['_id']) {
                    $id = (string) $search['_id'];
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('token' => $recipeToken, 'items' => $search->recipe)));
                    return $response->withStatus(200);
                } else {
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('token' => $recipeToken, 'items' => $search)));
                    return $response->withStatus(404);
                }
            } catch (Exception $e){
                return $response->withStatus(503);
            }
        } else {
            return $response->withStatus(404);
        }
        
        return $response->withStatus(404);
    }
}
