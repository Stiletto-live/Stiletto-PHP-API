<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;
use OpenAPIServer\Api\AbstractUsersApi;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;
use OpenAPIServer\DiscordApi;
use ReallySimpleJWT\Tokens;
use ReallySimpleJWT\Token;

class UsersApi extends AbstractUsersApi
{

    /**
     * PUT addNick
     * Summary: Add the nick of the game to the user
     * Notes: Update a user&#39;s game name
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function addNick(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $dataupdate = (key_exists('dataupdate', $queryParams)) ? $queryParams['dataupdate'] : null;
        
        $userdata = $request->getAttribute('authenticated_user');
        if ($userdata != null && $dataupdate != null && strlen($dataupdate) < 100) {
            try {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("update users set nickname=:nickname where discordID=:discordid");
                $stmt->bindParam(':nickname', $dataupdate);
                $stmt->bindParam(':discordid', $userdata["discordid"]);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'The nick to user has been added correctly')));
                return $response->withStatus(202);
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
        }
        return $response->withStatus(401);
    }

    /**
     * POST authDiscord
     * Summary: Your GET endpoint
     * Notes: To create a new account with discord
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function authDiscord(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $code = (key_exists('code', $queryParams)) ? $queryParams['code'] : null;
        if ($code != null) {
            $discordapi = new DiscordApi($_ENV['DISCORD_CLIENT_ID'],$_ENV['DISCORD_CLIENT_SECRET'],$_ENV['DISCORD_REDIRECT_URL']);
            $discord_user = $discordapi->get_user($code);

            if (!empty($discord_user)) {
                $discriminator = $discord_user->discriminator;
                $discord_username = $discord_user->username.'#'.$discriminator;
                $user_discord_id = $discord_user->id;

                if (!empty($user_discord_id)) {
                    try {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
                        $stmt1 = $dbh->prepare("select users.nickname, users.discordtag, users.discordID discordid, users.clanid, users.token from users where users.discordID=:discordid");
                        $stmt1->bindParam(':discordid', $user_discord_id);
                        $stmt1->setFetchMode(PDO::FETCH_ASSOC);
                        $stmt1->execute();
                        if ($stmt1->rowCount() > 0) {
                            while ($row = $stmt1->fetch()){
                                $dataUser = $row;
                            }
                            $tokenJWT = $dataUser['token'];
                            if ($tokenJWT != null) {
                                $isValid = Token::validate($tokenJWT, $_ENV['JWT_SECRET']);
                                if ($isValid) {
                                    $body = $response->getBody();
                                    $body->rewind();
                                    $body->write(json_encode(array('discordid' => $user_discord_id, 'discordTag' => $discord_username,'token' => $tokenJWT)));
                                    return $response->withStatus(202);
                                }
                            }
                        }
    
                        $expiration = time() + 2592000;
                        $datetime = date_create()->format('Y-m-d');
    
                        $tokens = new Tokens();
                        $tokenGenerated = $tokens->create('discordid',$user_discord_id, $_ENV['JWT_SECRET'], $expiration, $_ENV['BASE_REDIRECT_URL']);
                        $randomtoken = $tokenGenerated->getToken();
    
                        $stmt = $dbh->prepare("INSERT INTO users(discordID, discordTag,token,createdAt) VALUES (:discordid,:discordname,:token,:createdAt) ON DUPLICATE KEY UPDATE token=:tokenl, lastUpdate=:lastdate");
                        $stmt->bindParam(':discordid', $user_discord_id);
                        $stmt->bindParam(':discordname', $discord_username);
                        $stmt->bindParam(':token', $randomtoken);
                        $stmt->bindParam(':createdAt', $datetime);
                        $stmt->bindParam(':tokenl', $randomtoken);
                        $stmt->bindParam(':lastdate', $datetime);
                        $stmt->execute();
    
                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode(array('discordid' => $user_discord_id, 'discordTag' => $discord_username,'token' => $randomtoken)));
                        return $response->withStatus(202);
                    } catch (PDOException $e){
                        return $response->withStatus(503);
                    }
                }
            }
            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode(array('Error' => 'The connection to discord did not work.', 'Code' => $code)));
            return $response->withStatus(400);
        }
        return $response->withStatus(401);
    }

    /**
     * DELETE deleteUser
     * Summary: Delete all user data
     * Notes: Delete the user
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteUser(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];

        $userdata = $request->getAttribute('authenticated_user');
        if ($userdata != null) {
            try {
                $webhookurl = $_ENV['DISCORD_WEBHOOK'];
                $json_data = json_encode([
                    "content" => 'User '.$userdata["discordid"].' wants to delete his account',
                    "username" => "stiletto.live",
                    "tts" => true,
                ], JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE );
                $ch = curl_init($webhookurl);
                curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-type: application/json'));
                curl_setopt($ch, CURLOPT_POST, 1);
                curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);
                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
                $resp = curl_exec($ch);
                curl_close($ch);
                return $response->withStatus(204);
            } catch (Exception $e){
                return $response->withStatus(503);
            }
            /*
            try {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare("delete from users where discordID=:discordid and token=:token");
                $stmt->bindParam(':discordid', $discordid);
                $stmt->bindParam(':token', $token);
                $stmt->execute();

                $stmt = $dbh->prepare("delete from trades where discordID=:discordid");
                $stmt->bindParam(':discordid', $discordid);
                $stmt->execute();

                $stmt = $dbh->prepare("delete from clanmaps where discordID=:discordid");
                $stmt->bindParam(':discordid', $discordid);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'The user has been successfully deleted')));
                return $response->withStatus(204);
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
            */
        }
        return $response->withStatus(401);
    }

    /**
     * GET getUser
     * Summary: Return user information.
     * Notes: Returns a user&#39;s information
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getUser(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $userdata = $request->getAttribute('authenticated_user');

        if ($userdata != null) {
            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($userdata));
            return $response->withStatus(200);
        } 
        return $response->withStatus(205);
    }
}
