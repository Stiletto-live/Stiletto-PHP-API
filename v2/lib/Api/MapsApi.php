<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;
use OpenAPIServer\Api\AbstractMapsApi;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;

class MapsApi extends AbstractMapsApi
{

    /**
     * POST addMap
     * Summary: To create a new map
     * Notes: To create a map. The map type has to be one defined in the map json
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function addMap(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $mapname = (key_exists('mapname', $queryParams)) ? filter_var($queryParams['mapname'], FILTER_SANITIZE_SPECIAL_CHARS) : null;
        $mapdate = (key_exists('mapdate', $queryParams)) ? $queryParams['mapdate'] : date_create()->format('Y-m-d');
        $maptype = (key_exists('maptype', $queryParams)) ? filter_var($queryParams['maptype'], FILTER_SANITIZE_SPECIAL_CHARS) : null;

        try{
            if ($mapname != null && $maptype != null && strlen($mapname) < 100 && strlen($maptype) < 50) {
                $randomtoken = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 16);
                $datetime = new \DateTime($mapdate);
                $mapdate = $datetime->format('Y-m-d');

                if ($request->hasHeader('authorization')) {
                    $alltoken = implode($request->getHeader('authorization'));

                    preg_match('/Bearer\s+(.*)$/i', $alltoken, $match);
                    $token = $match[1];

                    $dataUser = $this->getUserByToken($token);
                    if ($dataUser != null) {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
            
                        $stmt = $dbh->prepare("insert into clanmaps(typemap,discordid,name,dateofburning,pass,allowedit) values(:maptype,:discordid,:mapname,:mapdate,:randomtoken,1)");
                        $stmt->bindParam(':discordid', $dataUser['discordid']);
                        $stmt->bindParam(':maptype', $maptype);
                        $stmt->bindParam(':mapname', $mapname);
                        $stmt->bindParam(':mapdate', $mapdate);
                        $stmt->bindParam(':randomtoken', $randomtoken);
                        $stmt->execute();

                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode(array('Success' => 'Map created', 'IdMap' => $dbh->lastInsertId(), 'PassMap' => $randomtoken)));
                        return $response->withStatus(201);
                    }
                } else {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();
        
                    $stmt = $dbh->prepare("insert into clanmaps(typemap,discordid,name,dateofburning,pass,allowedit) values(:maptype,'437020812168396820',:mapname,:mapdate,:randomtoken,1)");
                    $stmt->bindParam(':maptype', $maptype);
                    $stmt->bindParam(':mapname', $mapname);
                    $stmt->bindParam(':mapdate', $mapdate);
                    $stmt->bindParam(':randomtoken', $randomtoken);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Map created', 'IdMap' => $dbh->lastInsertId(), 'PassMap' => $randomtoken)));
                    return $response->withStatus(201);
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode(array('Error' => 'Error connecting to database')));
            return $response->withStatus(503);
        }
    }

    /**
     * POST addResourceMap
     * Summary: To create a new resource in the map
     * Notes: Add a resource on the map
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function addResourceMap(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $queryParams = $request->getQueryParams();
        $resourcetype = (key_exists('resourcetype', $queryParams)) ? $queryParams['resourcetype'] : null;
        $quality = (key_exists('quality', $queryParams)) ? $queryParams['quality'] : null;
        $x = (key_exists('x', $queryParams)) ? $queryParams['x'] : null;
        $y = (key_exists('y', $queryParams)) ? $queryParams['y'] : null;
        $description = (key_exists('description', $queryParams)) ? $queryParams['description'] : null;
        $lastharvested = (key_exists('harvested', $queryParams)) ? $queryParams['harvested'] : null;
        $mappass = (key_exists('mappass', $queryParams)) ? $queryParams['mappass'] : null;
        $randomtoken = substr(str_shuffle('0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'), 0, 8);

        try {
            if ($mapId != null) {
                $mapId = intval($mapId);
                $dataMap = $this->getMapData($mapId);

                if ($dataMap != null) {
                    if ($lastharvested == null) {
                        $lastharvested = date_create()->format('Y-m-d H:i:s');
                    }
                    if ($dataMap['allowedit'] != null && $dataMap['allowedit'] == 1 && $dataMap['pass'] == $mappass) {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
            
                        $stmt = $dbh->prepare("insert into resourcemap(mapid,resourcetype,quality,x,y,token, description, lastharvested) values(:mapid,:resourcetype,:quality,:x,:y,:token,:description, :lastharvested)");
                        $stmt->bindParam(':mapid', $mapId);
                        $stmt->bindParam(':resourcetype', $resourcetype);
                        $stmt->bindParam(':quality', $quality);
                        $stmt->bindParam(':x', $x);
                        $stmt->bindParam(':y', $y);
                        $stmt->bindParam(':token', $randomtoken);
                        $stmt->bindParam(':description', $description);
                        $stmt->bindParam(':lastharvested', $lastharvested);
                        $stmt->execute();

                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode(array('Success' => 'Added resource')));
                        return $response->withStatus(202);
                    } elseif ($request->hasHeader('authorization')) {
                        $alltoken = implode($request->getHeader('authorization'));
                        preg_match('/Bearer\s+(.*)$/i', $alltoken, $match);
                        $token = $match[1];
                        $dataUser = $this->getUserByToken($token);
                        if ($dataUser != null && $dataMap['discordID'] == $dataUser['discordid']) {
                            $connection = new BDConnection();
                            $dbh = $connection->getCon();
                
                            $stmt = $dbh->prepare("insert into resourcemap(mapid,resourcetype,quality,x,y,token, description, lastharvested) values(:mapid,:resourcetype,:quality,:x,:y,:token,:description, :lastharvested)");
                            $stmt->bindParam(':mapid', $mapId);
                            $stmt->bindParam(':resourcetype', $resourcetype);
                            $stmt->bindParam(':quality', $quality);
                            $stmt->bindParam(':x', $x);
                            $stmt->bindParam(':y', $y);
                            $stmt->bindParam(':token', $randomtoken);
                            $stmt->bindParam(':description', $description);
                            $stmt->bindParam(':lastharvested', $lastharvested);
                            $stmt->execute();

                            $body = $response->getBody();
                            $body->rewind();
                            $body->write(json_encode(array('Success' => 'Added resource')));
                            return $response->withStatus(202);
                        }
                    }
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }

    }

    /**
     * DELETE deleteMap
     * Summary: Delete map
     * Notes: Delete a map, only the owner of the map can do this.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteMap(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        
        try {
            if ($mapId != null) {
                $dataMap = $this->getMapData($mapId);
                $dataUser = $request->getAttribute('authenticated_user');
                if ($dataMap != null && $dataUser != null && $dataMap['discordID'] == $dataUser['discordid']) {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();
                    $mapId = intval($mapId);

                    $stmt = $dbh->prepare("delete from clanmaps where mapid=:mapid and discordID=:discordid");
                    $stmt->bindParam(':discordid', $dataUser['discordid']);
                    $stmt->bindParam(':mapid', $mapId);
                    $stmt->execute();

                    $stmt = $dbh->prepare("delete from resourcemap where mapid=:mapid");
                    $stmt->bindParam(':mapid', $mapId);
                    $stmt->execute();

                    return $response->withStatus(204);
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * DELETE deleteResource
     * Summary: Delete the resource
     * Notes: Delete a resource
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteResource(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $resourceId = $args['resourceId'];
        $queryParams = $request->getQueryParams();
        $token = (key_exists('token', $queryParams)) ? $queryParams['token'] : null;
        
        try {
            if ($mapId != null && $token != null && $resourceId != null) {
                $mapId = intval($mapId);
                $resourceId = intval($resourceId);
                $dataMap = $this->getMapData($mapId);

                if ($dataMap != null) {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();
        
                    $stmt = $dbh->prepare("delete from resourcemap where mapid=:mapid and resourceid=:resourceId and token=:token");
                    $stmt->bindParam(':mapid', $mapId);
                    $stmt->bindParam(':resourceId', $resourceId);
                    $stmt->bindParam(':token', $token);
                    $stmt->execute();

                    return $response->withStatus(204);
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * PUT editMap
     * Summary: Edit map
     * Notes: Edit map data
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function editMap(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $queryParams = $request->getQueryParams();
        $mapname = (key_exists('mapname', $queryParams)) ? $queryParams['mapname'] : null;
        $mapdate = (key_exists('mapdate', $queryParams)) ? $queryParams['mapdate'] : date_create()->format('Y-m-d');
        $allowediting = (key_exists('allowediting', $queryParams)) ? $queryParams['allowediting'] : null;
        $mappass = (key_exists('mappass', $queryParams)) ? $queryParams['mappass'] : null;
        
        try {
            if ($mapId != null && $mapname != null) {
                $dataMap = $this->getMapData($mapId);
                $dataUser = $request->getAttribute('authenticated_user');
                if ($dataMap != null && $dataUser != null && $dataMap['discordID'] == $dataUser['discordid'] && strlen($mapname) < 100 && strlen($mappass) < 50) {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    $mapId = intval($mapId);
                    $datetime = new \DateTime($mapdate);
                    $mapdate = $datetime->format('Y-m-d');

                    $allowediting = $allowediting == 'true' || intval($allowediting) == 1 ? 1 : 0;

                    $stmt = $dbh->prepare("update clanmaps set name=:mapname, dateofburning=:mapdate, allowedit=:allowedit, pass=:pass where mapid=:mapid and discordID=:discordID");
                    $stmt->bindParam(':mapname', $mapname);
                    $stmt->bindParam(':mapdate', $mapdate);
                    $stmt->bindParam(':allowedit', $allowediting);
                    $stmt->bindParam(':pass', $mappass);
                    $stmt->bindParam(':mapid', $mapId);
                    $stmt->bindParam(':discordID', $dataUser['discordid']);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Map edited')));
                    return $response->withStatus(202);
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * PUT editResource
     * Summary: For edit the resource
     * Notes: Edit the description of a resource
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function editResource(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $resourceId = $args['resourceId'];
        $queryParams = $request->getQueryParams();
        $token = (key_exists('token', $queryParams)) ? $queryParams['token'] : null;
        $description = (key_exists('description', $queryParams)) ? $queryParams['description'] : null;
        $lastharvested = (key_exists('harvested', $queryParams)) ? $queryParams['harvested'] : null;
        
        try {
            if ($mapId != null && $token != null && $resourceId != null) {
                $dataMap = $this->getMapData($mapId);

                if ($dataMap != null) {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();
                    $mapId = intval($mapId);
                    $resourceId = intval($resourceId);
        
                    if ($description != null) {
                        $stmt = $dbh->prepare("update resourcemap set description=:description where mapid=:mapid and resourceid=:resourceId and token=:token");
                        $stmt->bindParam(':mapid', $mapId);
                        $stmt->bindParam(':resourceId', $resourceId);
                        $stmt->bindParam(':token', $token);
                        $stmt->bindParam(':description', $description);
                        $stmt->execute();
                    } else {
                        if ($lastharvested == null) {
                            $lastharvested = date_create()->format('Y-m-d H:i');
                        }
                        $stmt = $dbh->prepare("update resourcemap set lastharvested=:lastharvested where mapid=:mapid and resourceid=:resourceId and token=:token");
                        $stmt->bindParam(':mapid', $mapId);
                        $stmt->bindParam(':resourceId', $resourceId);
                        $stmt->bindParam(':token', $token);
                        $stmt->bindParam(':lastharvested', $lastharvested);
                        $stmt->execute();
                    }

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Edited resource')));
                    return $response->withStatus(202);
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getMap
     * Notes: Returns map information
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getMap(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $queryParams = $request->getQueryParams();
        $mappass = (key_exists('mappass', $queryParams)) ? $queryParams['mappass'] : null;
        
        try {
            $connection = new BDConnection();
            $mapId = intval($mapId);
            
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare("select mapid, typemap, discordID, name, dateofburning, pass, allowedit from clanmaps where mapid=:mapid and pass=:pass");
            $stmt->bindParam(':mapid', $mapId);
            $stmt->bindParam(':pass', $mappass);
            $stmt->setFetchMode(PDO::FETCH_ASSOC);
            $stmt->execute();
            $results = $stmt->fetch(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getMaps
     * Summary: Return all maps for that user and his clan
     * Notes: Return your map list and your clan&#39;s maps
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getMaps(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();

        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                if ( $dataUser['clanid'] != null) {
                    $stmt = $dbh->prepare("select clanmaps.mapid, clanmaps.typemap, clanmaps.discordid, clanmaps.name, clanmaps.dateofburning, clanmaps.pass, clanmaps.allowedit, users.discordTag from clanmaps,users WHERE clanmaps.discordID=users.discordID and clanmaps.discordid in (select discordID from users where clanid=:clanid)");
                    $stmt->bindParam(':clanid', $dataUser['clanid']);
                    $stmt->execute();
                    $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
                } else {
                    $stmt = $dbh->prepare("select clanmaps.mapid, clanmaps.typemap, clanmaps.discordid, clanmaps.name, clanmaps.dateofburning, clanmaps.pass, clanmaps.allowedit from clanmaps WHERE clanmaps.discordID=:discordid");
                    $stmt->bindParam(':discordid', $dataUser['discordid']);
                    $stmt->execute();
                    $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
                }
    
                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(200);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

     /**
     * GET getResources
     * Summary: Return all resources for that map
     * Notes: Returns all resources on a map
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getResources(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $mapId = $args['mapId'];
        $queryParams = $request->getQueryParams();
        $mappass = (key_exists('mappass', $queryParams)) ? $queryParams['mappass'] : null;
        
        try {
            if ($mapId != null && $mappass != null) {
                $mapId = intval($mapId);
                $dataMap = $this->getMapData($mapId);
                
                if ($dataMap != null && $dataMap['pass'] == $mappass) {
                    $this->updateDateMap($mapId);
                    if ($request->hasHeader('authorization')) {
                        $alltoken = implode($request->getHeader('authorization'));
    
                        preg_match('/Bearer\s+(.*)$/i', $alltoken, $match);
                        $token = $match[1];
    
                        $dataUser = $this->getUserByToken($token);
                    }

                    if (($dataMap['allowedit'] != null && $dataMap['allowedit'] == 1) || ($dataUser != null && $dataUser['discordid'] == $dataMap['discordID'])) {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
            
                        $stmt = $dbh->prepare("select resourcemap.resourceid, resourcemap.mapid, resourcemap.resourcetype, resourcemap.quality, resourcemap.x, resourcemap.y, resourcemap.token, resourcemap.description, resourcemap.lastharvested, clanmaps.typemap from clanmaps LEFT JOIN resourcemap on resourcemap.mapid=clanmaps.mapid where clanmaps.mapid=:mapid");
                        $stmt->bindParam(':mapid', $mapId);
                        $stmt->execute();
                        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode($results));
                        return $response->withStatus(200);
                    } else {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
            
                        $stmt = $dbh->prepare("select resourcemap.resourceid, resourcemap.mapid, resourcemap.resourcetype, resourcemap.quality, resourcemap.x, resourcemap.y, resourcemap.description, resourcemap.lastharvested, clanmaps.typemap from clanmaps LEFT JOIN resourcemap on resourcemap.mapid=clanmaps.mapid where clanmaps.mapid=:mapid");
                        $stmt->bindParam(':mapid', $mapId);
                        $stmt->execute();
                        $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode($results));
                        return $response->withStatus(200);
                    }
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    private function getUserByToken(string $token) {
        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare("select users.nickname, users.discordtag, users.discordID discordid, users.clanid, clans.name clanname, clans.leaderid, clans.discordid serverdiscord from users left join clans on users.clanid=clans.clanid where users.token=:token");
            $stmt->bindParam(':token', $token);
            $stmt->setFetchMode(PDO::FETCH_ASSOC);
            $stmt->execute();
            if ($stmt->rowCount() <= 0) {
                return null;
            } else {
                while ($row = $stmt->fetch()){
                    $dataUser = $row;
                }
                return $dataUser;
            }
        } catch (PDOException $e){
            return null;
        }
        return null;
    }

    public function getMapData(String $mapid) {
        try {
            $connection = new BDConnection();

            $mapid = intval($mapid);
            
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare("select mapid, typemap, discordID, name, dateofburning, pass, allowedit from clanmaps where mapid=:mapid");
            $stmt->bindParam(':mapid', $mapid);
            $stmt->setFetchMode(PDO::FETCH_ASSOC);
            $stmt->execute();
            if ($stmt->rowCount() <= 0) {
                return null;
            } else {
                while ($row = $stmt->fetch()){
                    $dataMap = $row;
                }
                return $dataMap;
            }
        } catch (PDOException $e){
            return null;
        }
        return null;
    }

    public function updateDateMap($mapid) {
        if ($mapid != null) {
            $datetime = date_create()->format('Y-m-d');
            try {
                $mapid = intval($mapid);
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare("update clanmaps set lastUpdate=:date where mapid=:mapid");
                $stmt->bindParam(':date', $datetime);
                $stmt->bindParam(':mapid', $mapid);
                $stmt->execute();
            } catch (PDOException $e){
            }
        }
    }
}
