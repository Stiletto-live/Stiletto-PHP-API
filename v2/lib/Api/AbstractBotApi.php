<?php

/**
 * Stiletto API
 * PHP version 7.3
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.9.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractBotApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractBotApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * POST addTechByBot
     * Summary: addTechByBot
     * Notes: Adds the list of learned technologies to that user.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addTechByBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $tree = (key_exists('tree', $queryParams)) ? $queryParams['tree'] : null;
        $body = $request->getParsedBody();
        $message = "How about implementing addTechByBot as a POST method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST addWalker
     * Summary: Add a walker
     * Notes: Add or update a walker
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function addWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $discordid = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : null;
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $lastUser = (key_exists('lastUser', $queryParams)) ? $queryParams['lastUser'] : null;
        $message = "How about implementing addWalker as a POST method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getBotConfigs
     * Summary: Get Bot Configs
     * Notes: Return all configurations
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getBotConfigs(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $message = "How about implementing getBotConfigs as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getDiscordConfigByServer
     * Summary: Get Discord Config By Server
     * Notes: Return the bot configuration
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getDiscordConfigByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $message = "How about implementing getDiscordConfigByServer as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getMembersPermisionsBot
     * Summary: getMembersPermisionsBot
     * Notes: Return clan members permisions
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */

    public function getMembersPermisionsBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $message = "How about implementing getMembersPermisionsBot as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    public function getRelationshipsByBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $message = "How about implementing getRelationshipsByBot as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }


    /**
     * GET getWalkersByServer
     * Summary: getWalkers
     * Notes: Return a walker list
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getWalkersByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordid = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : null;
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $owner = (key_exists('owner', $queryParams)) ? $queryParams['owner'] : null;
        $lastuser = (key_exists('lastuser', $queryParams)) ? $queryParams['lastuser'] : null;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : null;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : null;
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : null;
        $use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $desc = (key_exists('desc', $queryParams)) ? $queryParams['desc'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $message = "How about implementing getWalkersByServer as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getWhoHasLearn
     * Summary: getWhoHasLearn
     * Notes: Give who in your clan has learned something
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getWhoHasLearn(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $tree = (key_exists('tree', $queryParams)) ? $queryParams['tree'] : null;
        $tech = (key_exists('tech', $queryParams)) ? $queryParams['tech'] : null;
        $message = "How about implementing getWhoHasLearn as a GET method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * DELETE kickFromClan
     * Summary: kickFromClan
     * Notes: Kick a clan member
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function kickFromClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $nick = (key_exists('nick', $queryParams)) ? $queryParams['nick'] : null;
        $message = "How about implementing kickFromClan as a DELETE method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST linkClan
     * Summary: linkClan
     * Notes: Allows to link the discord server with the clan. This can only be done by clan leaders or anyone with bot permissions.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function linkClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $memberid = (key_exists('memberid', $queryParams)) ? $queryParams['memberid'] : null;
        $message = "How about implementing linkClan as a POST method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT botEditWalker
     * Notes: If is PVP walker, it is marked as not ready
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function botEditWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $message = "How about implementing botEditWalker as a PUT method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT updateBotConfigByServer
     * Summary: Update Bot Config By Server
     * Notes: Update the bot configuration
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function updateBotConfigByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $languaje = (key_exists('languaje', $queryParams)) ? $queryParams['languaje'] : null;
        $clanlog = (key_exists('clanlog', $queryParams)) ? $queryParams['clanlog'] : null;
        $kick = (key_exists('kick', $queryParams)) ? $queryParams['kick'] : null;
        $readypvp = (key_exists('readypvp', $queryParams)) ? $queryParams['readypvp'] : null;
        $walkeralarm = (key_exists('walkeralarm', $queryParams)) ? $queryParams['walkeralarm'] : null;
        $message = "How about implementing updateBotConfigByServer as a PUT method in OpenAPIServer\Api\BotApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
