<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use OpenAPIServer\Api\AbstractClansApi;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;

class ClansApi extends AbstractClansApi
{

    /**
     * POST createClan
     * Summary: To create a new clan
     * Notes: To create a clan. The values of clancolor and clandiscord can be null
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function createClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        
        $queryParams = $request->getQueryParams();
        $clanname = (key_exists('clanname', $queryParams)) ? filter_var($queryParams['clanname'], FILTER_SANITIZE_SPECIAL_CHARS) : null;
        $clancolor = (key_exists('clancolor', $queryParams)) ? filter_var($queryParams['clancolor'], FILTER_SANITIZE_SPECIAL_CHARS) : null;
        $clandiscord = (key_exists('clandiscord', $queryParams)) ? filter_var($queryParams['clandiscord'], FILTER_SANITIZE_SPECIAL_CHARS) : null;
        $symbol = (key_exists('symbol', $queryParams)) ? $queryParams['symbol'] : null;
        $recruit = (key_exists('recruit', $queryParams)) ? $queryParams['recruit'] : true;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;

        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && strlen($clanname) < 50 && strlen($clanname) > 3 && strlen($clancolor) < 10 && strlen($clandiscord) < 10 && strlen($symbol) < 50) {
                if ($dataUser["clanid"] != null) {
                    return $response->withStatus(405);
                }

                $isRecruiting = $recruit == 'true' ? 1 : 0;

                $datetime = date_create()->format('Y-m-d');
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                if ($region != null) {
                    $stmt = $dbh->prepare("select * FROM clusters WHERE CONCAT_WS('-', region, name) = :region");
                    $stmt->bindParam(':region', $region, PDO::PARAM_STR);
                    $stmt->setFetchMode(PDO::FETCH_ASSOC);
                    $stmt->execute();
                    if ($stmt->rowCount() > 0) {
                    } else {
                        $region = 'EU-Official';
                    }
                } else {
                    $region = 'EU-Official';
                }

                $stmt = $dbh->prepare("insert into clans(name,leaderid,invitelink,flagcolor,creationdate, recruitment, region, symbol) values(:name,:leaderid,:invitelink,:flagcolor,:creationdate, :recruitment, :region, :symbol)");
                $stmt->bindParam(':name', $clanname, PDO::PARAM_STR);
                $stmt->bindParam(':leaderid', $dataUser["discordid"], PDO::PARAM_STR);
                $stmt->bindParam(':invitelink', $clandiscord, PDO::PARAM_STR);
                $stmt->bindParam(':flagcolor', $clancolor, PDO::PARAM_STR);
                $stmt->bindParam(':creationdate', $datetime);
                $stmt->bindParam(':recruitment', $isRecruiting);
                $stmt->bindParam(':region', $region, PDO::PARAM_STR);
                $stmt->bindParam(':symbol', $symbol, PDO::PARAM_STR);
                $stmt->execute();

                $stmt = $dbh->prepare("select clanid from clans where leaderid=:leaderid");
                $stmt->bindParam(':leaderid', $dataUser["discordid"]);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();

                if ($stmt->rowCount() > 0) {
                    while ($row = $stmt->fetch()){
                        $clandiscordid = $row['clanid'];
                    }

                    if ($clandiscordid != null) {
                        $stmt = $dbh->prepare("update users set clanid=:clanid where discordID=:discordid");
                        $stmt->bindParam(':clanid', $clandiscordid);
                        $stmt->bindParam(':discordid', $dataUser["discordid"]);
                        $stmt->execute();
                    }
                }

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'Clan created')));
                return $response->withStatus(201);
            }
            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode(array('Error' => 'These connection data are wrong')));
            return $response->withStatus(205);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * POST createRelationship
     * Summary: To create new relationships
     * Notes: Type of relationship. 0 PNA, 1 Ally, 2 Enemy, 30 False PNA, 31 False Ally, 32 False War
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function createRelationship(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $queryParams = $request->getQueryParams();
        $typed = (key_exists('typed', $queryParams)) ? $queryParams['typed'] : null;
        $clanflag = (key_exists('clanflag', $queryParams)) ? $queryParams['clanflag'] : null;
        $nameotherclan = (key_exists('nameotherclan', $queryParams)) ? $queryParams['nameotherclan'] : null;
        $symbol = (key_exists('symbol', $queryParams)) ? $queryParams['symbol'] : "C1";
        
        try{
            $dataUser = $request->getAttribute('authenticated_user');
            $connection = new BDConnection();

            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId && ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'request'))) {
                $dbh = $connection->getCon();

                $clanId = intval($clanId);

                $stmt = $dbh->prepare("insert into diplomacy(idcreatorclan,typed,clanflag,nameotherclan,symbol) values(:idcreatorclan,:typed,:clanflag,:nameotherclan,:symbol)");
                $stmt->bindParam(':idcreatorclan', $clanId);
                $stmt->bindParam(':typed', $typed);
                $stmt->bindParam(':clanflag', $clanflag);
                $stmt->bindParam(':nameotherclan', $nameotherclan);
                $stmt->bindParam(':symbol', $symbol);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'The relationship of diplomacy has been created')));
                return $response->withStatus(201);
            }
            return $response->withStatus(405);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * DELETE deleteClan
     * Summary: Delete the clan, only the leader can be delete the clan
     * Notes: Delete a clan. It is necessary to be the leader of the clan in order to perform this action
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];

        try{
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null && $dataUser["clanid"] != null) {
                if ($dataUser["leaderid"] == $dataUser['discordid']) {
                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    $stmt = $dbh->prepare("delete from clans where clanid=:clanid");
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $stmt = $dbh->prepare("update users set clanid=null where clanid=:clanid");
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $stmt = $dbh->prepare("delete from diplomacy where idcreatorclan=:clanid");
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Clan deleted correctly')));
                    return $response->withStatus(204);
                } else {
                    return $response->withStatus(405);
                }
            }
            return $response->withStatus(205);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * DELETE deleteRelationship
     * Summary: Delete the indicated relationship
     * Notes: It erases a diplomatic relationship. In case of war the other clan has to accept it. Only the clan leader can perform this action
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteRelationship(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $id = $args['id'];
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');
            $connection = new BDConnection();

            if ($dataUser != null && $dataUser["clanid"] != null && ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'request')) && $id != null) {
                $dbh = $connection->getCon();

                $clanId = intval($clanId);
                $id = intval($id);

                $stmt = $dbh->prepare("delete from diplomacy where idcreatorclan=:clanid and id=:id");
                $stmt->bindParam(':clanid', $clanId);
                $stmt->bindParam(':id', $id);
                $stmt->execute();
                return $response->withStatus(204);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getClanInfo
     * Summary: Return the information of the clan members
     * Notes: Returns basic clan information
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getClanInfo(ServerRequestInterface $request, ResponseInterface $response, array $args) {
        $clanId = $args['clanId'];

        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();
            $clanId = intval($clanId);
            $stmt = $dbh->prepare('select clans.clanid, clans.name, clans.discordid, clans.leaderid, clans.invitelink, clans.recruitment, clans.flagcolor, clans.symbol, clans.region, users.discordTag from clans, users where clans.leaderid=users.discordID and clans.clanid=:clanid');
            $stmt->bindParam(':clanid', $clanId);
            $stmt->execute();
            $results = $stmt->fetch(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getClans
     * Summary: Return the list of clans
     * Notes: Return the list of clans
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */

    public function getClans(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : 10;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : 1;
        $name = (key_exists('name', $queryParams)) ? '%'.$queryParams['name'].'%' : null;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;

        try {
            if ($pageSize < 0) {
                $pageSize = 10;
            }
            if ($page < 0) {
                $page = 1;
            }

            $offset = ((int) $pageSize * ((int) $page-1));
            $pageize = (int) $pageSize;

            $sql = "select clans.clanid, clans.name, clans.discordid, clans.leaderid, clans.invitelink, clans.recruitment, clans.flagcolor, clans.symbol, clans.region, users.discordTag from clans, users where clans.leaderid=users.discordID and clans.recruitment = 1";

            if ($name != null) {
                $sql .= " and clans.name like :clanname";
            }

            if ($region != null) {
                $sql .= " and clans.region like :region";
            }

            $sql .= " LIMIT :pagesize OFFSET :page";

            $connection = new BDConnection();
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare($sql);

            $stmt->bindParam(':pagesize', $pageSize, PDO::PARAM_INT);
            $stmt->bindParam(':page', $offset, PDO::PARAM_INT);

            if ($name != null) {
                $stmt->bindParam(':clanname', $name, PDO::PARAM_STR);
            }
            if ($region != null) {
                $stmt->bindParam(':region', $region, PDO::PARAM_STR);
            }

            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(202);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getDiscordConfig
     * Summary: Get Discord Config
     * Notes: Return the bot configuration
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getDiscordConfig(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare("select serverdiscordid, botlanguaje, readclanlog, automatickick, setnotreadypvp, walkeralarm from botconfigs where serverdiscordid=:serverdiscord");
                $stmt->bindParam(':serverdiscord', $dataUser["serverdiscord"]);
                $stmt->execute();
                $results = $stmt->fetch(PDO::FETCH_ASSOC);

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(200);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getMemberPermissions
     * Summary: getMemberPermissions
     * Notes: Return a clan member&#39;s permissions Only the clan leader and the clan member can use this endpoint.
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getMemberPermissions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $memberid = $args['memberid'];

        if (empty($clanId) || empty($memberid)) {
            return $response->withStatus(404);
        }

        try {
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null && ($dataUser["leaderid"] == $dataUser['discordid'] || $dataUser["discordid"] == $memberid)) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare("select clanid, discordID, request, kickmembers, walkers, bot, diplomacy from clanpermissions where clanid=:clanid and discordID=:discordid");
                $stmt->bindParam(':clanid', $clanId);
                $stmt->bindParam(':discordid', $memberid);
                $stmt->execute();
                $results = $stmt->fetch(PDO::FETCH_ASSOC);

                if (empty($results)) {
                    $results = array(
                        'clanid' => $dataUser['clanid'],
                        'discordID' => $dataUser['discordid'],
                        'request' => 0,
                        'kickmembers' => 0,
                        'walkers' => 0,
                        'bot' => 0,
                        'diplomacy' => 0
                    );
                }

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(200);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getMembers
     * Summary: Return the information of the clan members
     * Notes: Returning Clan Members
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getMembers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare('select users.discordid, users.nickname, users.discordtag, clans.leaderid from users,clans where users.clanid=clans.clanid and users.clanid=:clanid');
                $stmt->bindParam(':clanid', $dataUser["clanid"]);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(202);
            }
            return $response->withStatus(405);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getRelationships
     * Summary: Return the list of relationships for the clan
     * Notes: Return the clan&#39;s diplomacy
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getRelationships(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare('SELECT clans.leaderid, diplomacy.id, diplomacy.typed, diplomacy.clanflag flagcolor, diplomacy.nameotherclan name, diplomacy.symbol FROM clans LEFT JOIN diplomacy on clans.clanid=diplomacy.idcreatorclan where clans.clanid=:clanid');
                $stmt->bindParam(':clanid', $dataUser["clanid"]);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(202);
            }
            return $response->withStatus(405);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getRequests
     * Summary: Return the list of requests for entry to the clan
     * Notes: Returns pending applications for entry into a clan
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getRequests(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
                $stmt = $dbh->prepare('select users.discordid, users.nickname, users.discordtag, clans.leaderid, clanrequest.message from users,clanrequest, clans where users.discordid=clanrequest.discordid and clanrequest.clanid=clans.clanid and clanrequest.clanid=:clanid');
                $stmt->bindParam(':clanid', $dataUser["clanid"]);
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(202);
            }
            return $response->withStatus(405);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

        /**
     * DELETE leaveClan
     * Notes: It is for the user to leave the clan.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function leaveClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        try{
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("delete from clanpermissions where discordID=:memberid and clanid=:clanid");
                $stmt->bindParam(':memberid', $dataUser['discordid']);
                $stmt->bindParam(':clanid', $dataUser["clanid"]);
                $stmt->execute();
    
                $stmt = $dbh->prepare("update users set clanid=null where discordID=:discordid");
                $stmt->bindParam(':discordid', $dataUser['discordid']);
                $stmt->execute();

                return $response->withStatus(204);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * POST sendRequest
     * Summary: To send an request to the clan
     * Notes: Add a clan application, it can only be done if you are not in a clan
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function sendRequest(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $queryParams = $request->getQueryParams();
        $message = (key_exists('message', $queryParams)) ? $queryParams['message'] : null;
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');

            if ($dataUser != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $clanId = intval($clanId);
    
                $stmt = $dbh->prepare("insert into clanrequest(clanid,discordid,message) values(:clanid,:discordid,:message)");
                $stmt->bindParam(':clanid', $clanId);
                $stmt->bindParam(':discordid', $dataUser['discordid']);
                $stmt->bindParam(':message', $message);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'Request sent')));
                return $response->withStatus(202);
            }
            return $response->withStatus(405);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * PUT updateBotConfig
     * Summary: Update Bot Config
     * Notes: Update the bot configuration
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function updateBotConfig(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $queryParams = $request->getQueryParams();
        $languaje = (key_exists('languaje', $queryParams)) ? $queryParams['languaje'] : 'EN';
        $clanlog = (key_exists('clanlog', $queryParams)) ? $queryParams['clanlog'] : 1;
        $kick = (key_exists('kick', $queryParams)) ? $queryParams['kick'] : 0;
        $readypvp = (key_exists('readypvp', $queryParams)) ? $queryParams['readypvp'] : 0;
        $walkeralarm = (key_exists('walkeralarm', $queryParams)) ? $queryParams['walkeralarm'] : 0;
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');

            $connection = new BDConnection();
            if ($dataUser != null && !empty($dataUser['serverdiscord']) && ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'bot'))) {
                $logboolean = $clanlog == 'true' ? 1 : 0;
                $kickboolean  = $kick  == 'true' ? 1 : 0;
                $readyboolean  = $readypvp  == 'true' ? 1 : 0;
                $alarmboolean  = $walkeralarm  == 'true' ? 1 : 0;
                if (strlen($languaje) > 10) { $languaje = 'EN';}

                $dbh = $connection->getCon();
                $stmt = $dbh->prepare("insert into botconfigs(serverdiscordid,botlanguaje,readclanlog,automatickick,setnotreadypvp,walkeralarm) values(:discordserver,:languaje,:clanlog,:kick,:notreadypvp,:walkeralarm) ON DUPLICATE KEY UPDATE botlanguaje=:languaje, readclanlog=:clanlog, automatickick=:kick, setnotreadypvp=:notreadypvp, walkeralarm=:walkeralarm");
                $stmt->bindParam(':discordserver', $dataUser['serverdiscord']);
                $stmt->bindParam(':languaje', $languaje);
                $stmt->bindParam(':clanlog', $logboolean);
                $stmt->bindParam(':kick', $kickboolean);
                $stmt->bindParam(':notreadypvp', $readyboolean);
                $stmt->bindParam(':walkeralarm', $alarmboolean);
                $stmt->execute();

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'Config updated')));
                return $response->withStatus(200);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }


    /**
     * PUT updateClan
     * Summary: Update Clan
     * Notes: To update the clan. Only the leader can use this endpoint
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function updateClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $queryParams = $request->getQueryParams();
        $clanname = (key_exists('clanname', $queryParams)) ? filter_var($queryParams['clanname'], FILTER_SANITIZE_SPECIAL_CHARS) : null;
        $clancolor = (key_exists('clancolor', $queryParams)) ? $queryParams['clancolor'] : null;
        $clandiscord = (key_exists('clandiscord', $queryParams)) ? $queryParams['clandiscord'] : null;
        $symbol = (key_exists('symbol', $queryParams)) ? $queryParams['symbol'] : null;
        $recruit = (key_exists('recruit', $queryParams)) ? $queryParams['recruit'] : true;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        
        if ($clanname != null && strlen($clanname) < 50 && strlen($clanname) > 5 && strlen($clandiscord) < 10 && strlen($symbol) < 50 && strlen($clancolor) < 10) {
            try {
                $dataUser = $request->getAttribute('authenticated_user');
    
                if ($dataUser != null && $dataUser["leaderid"] == $dataUser['discordid']) {

                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    $isRecruiting = $recruit == 'true' ? 1 : 0;

                    if ($region != null) {
                        $stmt = $dbh->prepare("select * FROM clusters WHERE CONCAT_WS('-', region, name) = :region");
                        $stmt->bindParam(':region', $region, PDO::PARAM_STR);
                        $stmt->setFetchMode(PDO::FETCH_ASSOC);
                        $stmt->execute();
                        if ($stmt->rowCount() > 0) {
                        } else {
                            $region = 'EU-Official';
                        }
                    } else {
                        $region = 'EU-Official';
                    }

                    $stmt = $dbh->prepare("update clans set name=:name, invitelink=:discordlink, flagcolor=:flagcolor, symbol=:symbol, recruitment=:recruitment, region=:region where clanid=:clanid");
                    $stmt->bindParam(':name', $clanname, PDO::PARAM_STR);
                    $stmt->bindParam(':discordlink', $clandiscord, PDO::PARAM_STR);
                    $stmt->bindParam(':flagcolor', $clancolor, PDO::PARAM_STR);
                    $stmt->bindParam(':symbol', $symbol, PDO::PARAM_STR);
                    $stmt->bindParam(':clanid', $dataUser['clanid'], PDO::PARAM_STR);
                    $stmt->bindParam(':recruitment', $isRecruiting);
                    $stmt->bindParam(':region', $region, PDO::PARAM_STR);

                    $stmt->execute();
    
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Config updated')));
                    return $response->withStatus(200);
                }
                return $response->withStatus(401);
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
        } else {
            return $response->withStatus(400);
        }
    }


    /**
     * PUT updateMember
     * Summary: To perform the actions of kick from the clan or changing the clan leader. Only leaders can use these options
     * Notes: Update a member&#39;s information. You can kick out or pass on leadership to a member. Only the clan leader can perform these actions
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function updateMember(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $memberid = $args['memberid'];
        $queryParams = $request->getQueryParams();
        $accion = (key_exists('accion', $queryParams)) ? $queryParams['accion'] : null;

        try{
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && $dataUser["clanid"] != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                if ($accion == 'owner' && $dataUser["leaderid"] == $dataUser['discordid']) {
                    $stmt = $dbh->prepare("update clans set leaderid=:leaderid where clanid=:clanid");
                    $stmt->bindParam(':leaderid', $memberid);
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'The change has been made correctly')));
                    return $response->withStatus(202);
                } elseif ($accion == 'kick' && $dataUser['leaderid'] != $memberid && ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'kickmembers'))) {
                    $stmt = $dbh->prepare("update users set clanid=null where discordID=:memberid and clanid=:clanid");
                    $stmt->bindParam(':memberid', $memberid);
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $stmt = $dbh->prepare("delete from clanpermissions where discordID=:memberid and clanid=:clanid");
                    $stmt->bindParam(':memberid', $memberid);
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'The change has been made correctly')));
                    return $response->withStatus(202);
                }
                return $response->withStatus(405);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

     /**
     * PUT updateMemberPermissions
     * Summary: updateMemberPermissions
     * Notes: Only the leader can perform this action
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function updateMemberPermissions(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $memberid = $args['memberid'];
        $queryParams = $request->getQueryParams();
        $requestValue = (key_exists('request', $queryParams)) ? $queryParams['request'] : 0;
        $kickmembers = (key_exists('kickmembers', $queryParams)) ? $queryParams['kickmembers'] : 0;
        $walkers = (key_exists('walkers', $queryParams)) ? $queryParams['walkers'] : 0;
        $bot = (key_exists('bot', $queryParams)) ? $queryParams['bot'] : 0;
        $diplomacy = (key_exists('diplomacy', $queryParams)) ? $queryParams['diplomacy'] : 0;
        
        if (empty($clanId) || empty($memberid)) {
            return $response->withStatus(400);
        }

        if ($request != null && $kickmembers != null && $walkers != null && $bot != null && $diplomacy != null) {
            try {
                $dataUser = $request->getAttribute('authenticated_user');

                if ($dataUser != null && $dataUser["leaderid"] == $dataUser['discordid']) {

                    $sql = "insert into clanpermissions(clanid,discordID,request,kickmembers,walkers,bot,diplomacy) values(:clanid,:discordid,:request,:kickmembers,:walkers,:bot,:diplomacy) ON DUPLICATE KEY UPDATE request=:request, kickmembers=:kickmembers, walkers=:walkers, bot=:bot, diplomacy=:diplomacy";

                    $requestValue = intval($requestValue == 'true' ? 1 : 0);
                    $kickmembers = intval($kickmembers == 'true' ? 1 : 0);
                    $walkers = intval($walkers == 'true' ? 1 : 0);
                    $bot = intval($bot == 'true' ? 1 : 0);
                    $diplomacy = intval($diplomacy == 'true' ? 1 : 0);

                    $connection = new BDConnection();
                    $dbh = $connection->getCon();

                    $stmt = $dbh->prepare($sql);
                    $stmt->bindParam(':clanid', $dataUser["clanid"]);
                    $stmt->bindParam(':discordid', $memberid);
                    $stmt->bindParam(':request', $requestValue);
                    $stmt->bindParam(':kickmembers', $kickmembers);
                    $stmt->bindParam(':walkers', $walkers);
                    $stmt->bindParam(':bot', $bot);
                    $stmt->bindParam(':diplomacy', $diplomacy);
                    $stmt->execute();

                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'The change has been made correctly')));
                    return $response->withStatus(200);
                }
                return $response->withStatus(401);
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
        }
        return $response->withStatus(400);
    }

    /**
     * PUT updateRequest
     * Summary: To accept or reject the request
     * Notes: It serves to accept or reject an application for entry into a clan. Only the clan leader can accept or reject applications
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function updateRequest(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $clanId = $args['clanId'];
        $id = $args['id'];
        $queryParams = $request->getQueryParams();
        $accion = (key_exists('accion', $queryParams)) ? $queryParams['accion'] : null;

        try{
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && $dataUser["clanid"] != null && $dataUser["clanid"] == $clanId) {
                $connection = new BDConnection();
                if ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'request')) {
                    if ($accion == 'reject' || $accion == 'accept') {
                        $dbh = $connection->getCon();
                        $clanId = intval($clanId);

                        $stmt = $dbh->prepare("select * from clanrequest where clanid=:clanid and discordID=:member");
                        $stmt->bindParam(':clanid', $clanId);
                        $stmt->bindParam(':member', $id);
                        $stmt->setFetchMode(PDO::FETCH_ASSOC);
                        $stmt->execute();
                        if ($stmt->rowCount() > 0) {
                            if ($accion == 'accept') {
                                $stmt = $dbh->prepare("update users set clanid=:clanid where discordID=:member");
                                $stmt->bindParam(':member', $id);
                                $stmt->bindParam(':clanid', $clanId);
                                $stmt->execute();
    
                                $stmt = $dbh->prepare("delete from clanrequest where discordID=:member");
                                $stmt->bindParam(':member', $id);
                                $stmt->execute();
                            } else {
                                $stmt = $dbh->prepare("delete from clanrequest where clanid=:clanid and discordID=:member");
                                $stmt->bindParam(':clanid', $clanId);
                                $stmt->bindParam(':member', $id);
                                $stmt->execute();
                            }
                            $body = $response->getBody();
                            $body->rewind();
                            $body->write(json_encode(array('Success' => 'The request has been processed correctly')));
                            return $response->withStatus(202);
                        }
                    }
                }
                return $response->withStatus(405);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

}
