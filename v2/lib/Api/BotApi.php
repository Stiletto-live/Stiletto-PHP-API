<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.2.3
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPIServer\Api\AbstractBotApi;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;
use \MongoDB\Client as Mongo;

/**
 * AbstractBotApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class BotApi extends AbstractBotApi
{

    /**
     * POST addTechByBot
     * Summary: addTechByBot
     * Notes: Adds the list of learned technologies to that user.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function addTechByBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $tree = (key_exists('tree', $queryParams)) ? $queryParams['tree'] : null;
        $tech = (key_exists('tech', $queryParams)) ? $queryParams['tech'] : null;
        $discordtag = "";

        if ($discordid != null && $tree != null && $tech != null) {
            try {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
    
                $stmt = $dbh->prepare("select discordTag from users where discordID=:discordid");
                $stmt->bindParam(':discordid', $discordid);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();
                if ($stmt->rowCount() > 0) {
                    while ($row = $stmt->fetch()){
                        $discordtag = $row['discordTag'];
                    }
                } else {
                    return $response->withStatus(404);
                }
            } catch (PDOException $e){
                return $response->withStatus(503);
            }
            
            if (!empty($discordtag)) {
                try {
                    $client = new Mongo('mongodb+srv://'.$_ENV['MONGO_USERNAME'].':'.$_ENV['MONGO_PASSWORD'].'@'.$_ENV['MONGO_HOST']);
                    $collection = $client->lastoasis->tech;
        
                    $collection->updateOne(['discordtag' => $discordtag], ['$addToSet'=> [$tree =>$tech]], ['upsert' => true]);
        
                    $result = $collection->findOne(array('discordtag' => $discordtag));
        
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode($result));
                    return $response->withStatus(200);
                } catch (Exception $e){
                    return $response->withStatus(503);
                }
            }
        }

        return $response->withStatus(400);
    }

    /**
     * POST addWalker
     * Summary: Add a walker
     * Notes: Add or update a walker
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function addWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $walkerId = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $discordId = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : null;
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $lastUser = (key_exists('lastUser', $queryParams)) ? $queryParams['lastUser'] : null;
        
        try {
            if (empty($name)) {
                return $response->withStatus(200);
            }
            if ($walkerId != null && $discordId != null && $name != null && $lastUser != null) {
                $connection = new BDConnection();
                $datetime = date_create()->format('Y-m-d');

                $walker_use = null;
                $walker_type = null;

                if ($name != null) {
                    if (stripos($name, 'pvp') !== false) {
                        $walker_use = "PVP";
                    } else if (stripos($name, 'farm') !== false) {
                        $walker_use = "Farming";
                    } else if (stripos($name, 'ram') !== false) {
                        $walker_use = "RAM";
                    } else if (stripos($name, $lastUser) !== false) {
                        $walker_use = "Personal";
                    }
                    if (stripos($name, 'spider') !== false) {
                        $walker_type = 'Nomad Spider';
                    } else if (stripos($name, 'raptor') !== false) {
                        $walker_type = 'Raptor Sky';
                    } else {
                        $all_walkers_types = ['Buffalo', 'Camelop', 'Cobra', 'Dinghy', 'Domus', 'Falco', 'Firefly', 'Hornet', 'Mollusk', 'Panda', 'Proxy', 'Schmetterling', 'Nomad Spider', 'Stiletto', 'Titan', 'Toboggan', 'Tusker', 'Silur', 'Hercul', 'Balang', 'Raptor Sky'];
                        foreach ($all_walkers_types as $type_name) {
                            if (stripos($name, $type_name) !== false) {
                                $walker_type = $type_name;
                            }
                        }
                    }

                }

                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("select * from walkers where name=:name and discorid=:discorid");
                $stmt->bindParam(':name', $name);
                $stmt->bindParam(':discorid', $discordId);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();
                if ($stmt->rowCount() > 0) {
                    $stmt = $dbh->prepare("update walkers set datelastuse=:datelastuseupdate, lastUser=:lastuserupdate, walkerID=:walkerid where name=:name and discorid=:discorid");
                    $stmt->bindParam(':datelastuseupdate', $datetime);
                    $stmt->bindParam(':lastuserupdate', $lastUser);
                    $stmt->bindParam(':walkerid', $walkerId);
                    $stmt->bindParam(':name', $name);
                    $stmt->bindParam(':discorid', $discordId);
                    $stmt->execute();
                } else {
                    $stmt = $dbh->prepare("insert into walkers(walkerID,discorid,name,lastUser,datelastuse, walker_use, type, isReady) values(:walkerid,:discorid,:name,:lastuser,:datelastuse,:walker_use, :walker_type, 0) ON DUPLICATE KEY UPDATE name=:nameupdate, datelastuse=:datelastuseupdate, lastUser=:lastuserupdate, discorid=:discoridupdate");
                    $stmt->bindParam(':walkerid', $walkerId);
                    $stmt->bindParam(':discorid', $discordId);
                    $stmt->bindParam(':name', $name);
                    $stmt->bindParam(':lastuser', $lastUser);
                    $stmt->bindParam(':datelastuse', $datetime);
                    $stmt->bindParam(':walker_use', $walker_use);
                    $stmt->bindParam(':walker_type', $walker_type);
                    $stmt->bindParam(':nameupdate', $name);
                    $stmt->bindParam(':datelastuseupdate', $datetime);
                    $stmt->bindParam(':lastuserupdate', $lastUser);
                    $stmt->bindParam(':discoridupdate', $discordId);
                    $stmt->execute();
                }

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode(array('Success' => 'Walker created')));
                return $response->withStatus(201);
            }
            return $response->withStatus(400);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getBotConfigs
     * Summary: Get Bot Configs
     * Notes: Return all configurations
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getBotConfigs(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare('select serverdiscordid, botlanguaje, readclanlog, automatickick, setnotreadypvp, walkeralarm from botconfigs');
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getDiscordConfigByServer
     * Summary: Get Discord Config By Server
     * Notes: Return the bot configuration
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getDiscordConfigByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];

        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare('select serverdiscordid, botlanguaje, readclanlog, automatickick, setnotreadypvp, walkeralarm from botconfigs where serverdiscordid=:discordid');
            $stmt->bindParam(':discordid', $discordid);
            $stmt->execute();
            $results = $stmt->fetch(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getMembersPermisionsBot
     * Summary: getMembersPermisionsBot
     * Notes: Return clan members permisions
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */

    public function getMembersPermisionsBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];

        if (empty($discordid)) {
            return $response->withStatus(400);
        }

        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();

            $sql = "SELECT clanpermissions.* FROM clanpermissions, clans WHERE clanpermissions.clanid = clans.clanid and clans.discordid = :discordid";

            $stmt = $dbh->prepare($sql);
            $stmt->bindParam(':discordid', $discordid, PDO::PARAM_STR);
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }

        return $response->withStatus(501);
    }

    /**
     * GET getRelationshipsByBot
     * Summary: Return the list of relationships for the clan
     * Notes: Return the clan&#39;s diplomacy
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getRelationshipsByBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];

        if (empty($discordid)) {
            return $response->withStatus(400);
        }
        
        try {
            $connection = new BDConnection();
            $dbh = $connection->getCon();

            $stmt = $dbh->prepare('SELECT clans.leaderid, diplomacy.id, diplomacy.typed, diplomacy.clanflag flagcolor, diplomacy.nameotherclan name, diplomacy.symbol FROM clans LEFT JOIN diplomacy on clans.clanid=diplomacy.idcreatorclan where clans.discordid=:discordid');
            $stmt->bindParam(':discordid', $discordid, PDO::PARAM_STR);
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getWalkersByServer
     * Summary: getWalkers
     * Notes: Return a walker list
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getWalkersByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordid = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : 0;
        $name = (key_exists('name', $queryParams)) ? '%'.$queryParams['name'].'%' : null;
        $owner = (key_exists('owner', $queryParams)) ? '%'.$queryParams['owner'].'%' : null;
        $lastuser = (key_exists('lastuser', $queryParams)) ? '%'.$queryParams['lastuser'].'%' : null;
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : 10;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : null;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : 1;
        $walker_use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $description = (key_exists('desc', $queryParams)) ? '%'.$queryParams['desc'].'%' : null;
        $type = (key_exists('type', $queryParams)) ? '%'.$queryParams['type'].'%' : null;
        
        try {
            if ($pageSize < 0) {
                $pageSize = 10;
            }
            if ($page < 0) {
                $page = 1;
            }

            $offset = ((int) $pageSize * ((int) $page-1));

            $pageize = (int) $pageSize;

            $connection = new BDConnection();
            $dbh = $connection->getCon();

            $sql = "SELECT walkerID, walkers.name, ownerUser, lastUser, datelastuse, walkers.type, walker_use, isReady, walkers.description FROM walkers WHERE discorid=:discordid";

            if ($name != null) {
                $sql .= " and name like :walkername";
            }
            if ($owner != null) {
                $sql .= " and ownerUser like :owner";
            }
            if ($lastuser != null) {
                $sql .= " and lastUser like :lastuser";
            }
            if ($walkerid != null) {
                $sql .= " and walkerID=:walkerid";
            }
            if ($ready != null) {
                $sql .= " and isReady=:ready";
            }
            if ($walker_use != null) {
                $sql .= " and walker_use=:walkeruse";
            }
            if ($description != null) {
                $sql .= " and description like :description";
            }
            if ($type != null) {
                $sql .= " and type like :type";
            }

            $sql .= " ORDER BY datelastuse DESC LIMIT :pagesize OFFSET :page";

            $stmt = $dbh->prepare($sql);
            $stmt->bindParam(':discordid', $discordid, PDO::PARAM_INT);
            $stmt->bindParam(':pagesize', $pageize, PDO::PARAM_INT);
            $stmt->bindParam(':page', $offset, PDO::PARAM_INT);

            if ($name != null) {
                $stmt->bindParam(':walkername', $name);
            }
            if ($owner != null) {
                $stmt->bindParam(':owner', $owner, PDO::PARAM_STR);
            }
            if ($lastuser != null) {
                $stmt->bindParam(':lastuser', $lastuser, PDO::PARAM_STR);
            }
            if ($walkerid != null) {
                $stmt->bindParam(':walkerid', $walkerid, PDO::PARAM_INT);
            }
            if ($ready != null) {
                $stmt->bindParam(':ready', $ready);
            }
            if ($walker_use != null) {
                $stmt->bindParam(':walkeruse', $walker_use, PDO::PARAM_STR);
            }
            if ($description != null) {
                $stmt->bindParam(':description', $description, PDO::PARAM_STR);
            }
            if ($type != null) {
                $stmt->bindParam(':type', $type, PDO::PARAM_STR);
            }
            
            $stmt->execute();
            $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode($results));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }

    }

    /**
     * GET getWhoHasLearn
     * Summary: getWhoHasLearn
     * Notes: Give who in your clan has learned something
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getWhoHasLearn(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $tree = (key_exists('tree', $queryParams)) ? $queryParams['tree'] : null;
        $tech = (key_exists('tech', $queryParams)) ? $queryParams['tech'] : null;
        $users = [];

        if ($discordid != null && $tree != null && $tech != null) {
            try {
                $connection = new BDConnection();
                $dbh = $connection->getCon();
    
                $stmt = $dbh->prepare("select users.discordTag discordTag from users,clans where users.clanid=clans.clanid and clans.discordid=:discordid");
                $stmt->bindParam(':discordid', $discordid);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();
                if ($stmt->rowCount() > 0) {
                    while ($row = $stmt->fetch()){
                        array_push($users, $row['discordTag']);
                    }
                } else {
                    return $response->withStatus(404);
                }
            } catch (PDOException $e){
                return $response->withStatus(503);
            }

            try {
                $client = new Mongo('mongodb+srv://'.$_ENV['MONGO_USERNAME'].':'.$_ENV['MONGO_PASSWORD'].'@'.$_ENV['MONGO_HOST']);
                $collection = $client->lastoasis->tech;
                $result = $collection->find(['discordtag' => array('$in' => $users), $tree => $tech], ['projection' => ['_id' => 0, 'discordtag' => 1]])->toArray();
    
                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($result));
                return $response->withStatus(200);
            } catch (Exception $e){
                return $response->withStatus(503);
            }
        }
        
        return $response->withStatus(400);
    }

    /**
     * DELETE kickFromClan
     * Notes: Kick a clan member
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function kickFromClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $nick = (key_exists('nick', $queryParams)) ? $queryParams['nick'] : null;
        $clanid = null;
        $user_discord_id = null;

        try{
            if ($nick != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("select users.discordID, users.clanid from users, clans where users.clanid=clans.clanid and users.nickname=:nick and clans.discordid=:discordid");
                $stmt->bindParam(':nick', $nick);
                $stmt->bindParam(':discordid', $discordid);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();

                if ($stmt->rowCount() > 0) {
                    while ($row = $stmt->fetch()){
                        $clanid = $row['clanid'];
                        $user_discord_id = $row['discordID'];
                    }

                    if ($clanid != null && $user_discord_id != null) {
                        $stmt = $dbh->prepare("delete from clanpermissions where discordID=:memberid and clanid=:clanid");
                        $stmt->bindParam(':memberid', $user_discord_id);
                        $stmt->bindParam(':clanid', $clanid);
                        $stmt->execute();
            
                        $stmt = $dbh->prepare("update users set clanid=null where discordID=:discordid");
                        $stmt->bindParam(':discordid', $user_discord_id);
                        $stmt->execute();

                        return $response->withStatus(204);
                    }
                }
                return $response->withStatus(404);
            }
            return $response->withStatus(400);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }

        return $response->withStatus(400);
    }

    /**
     * POST linkClan
     * Summary: linkClan
     * Notes: Allows to link the discord server with the clan. This can only be done by clan leaders or anyone with bot permissions.
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */

    public function linkClan(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $memberid = (key_exists('memberid', $queryParams)) ? $queryParams['memberid'] : null;

        try{
            if ($memberid != null) {
                $leaderid = null;
                $clanid = null;

                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("select users.discordID, users.clanid clanid, clans.leaderid from users, clans where users.clanid=clans.clanid and users.discordID=:memberid");
                $stmt->bindParam(':memberid', $memberid);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();

                if ($stmt->rowCount() > 0) {
                    while ($row = $stmt->fetch()){
                        $clanid = $row['clanid'];
                        $leaderid = $row['leaderid'];
                    }

                    if ($clanid != null && $leaderid != null && ($leaderid == $memberid || $connection->hasPermission($clanid, $memberid, 'bot'))) {
                        $stmt = $dbh->prepare("update clans set discordid=:serverdiscord where clanid=:clanid");
                        $stmt->bindParam(':serverdiscord', $discordid);
                        $stmt->bindParam(':clanid', $clanid);
                        $stmt->execute();


                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode(array('Success' => 'Linked server ', 'ClanID' => $clanid, 'Server Discord ID' => $discordid)));
                        return $response->withStatus(200);
                    }
                }
                return $response->withStatus(401);
            } else {
                return $response->withStatus(400);
            }
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
        
        return $response->withStatus(400);
    }

    /**
     * PUT botEditWalker
     * Notes: If is PVP walker, it is marked as not ready
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function botEditWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : 0;

        try{
            if ($walkerid != null) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $isready = $ready == 'true' || $ready == '1' ? 1 : 0;

                $stmt = $dbh->prepare("update walkers set isReady=:ready where discorid=:discordid and walkerID=:walkerid");
                $stmt->bindParam(':ready', $isready);
                $stmt->bindParam(':discordid', $discordid);
                $stmt->bindParam(':walkerid', $walkerid);
                $stmt->execute();
                return $response->withStatus(200);
            }
            return $response->withStatus(400);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
        
        return $response->withStatus(400);
    }

    /**
     * PUT updateBotConfigByServer
     * Summary: Update Bot Config By Server
     * Notes: Update the bot configuration
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function updateBotConfigByServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $discordid = $args['discordid'];
        $queryParams = $request->getQueryParams();
        $languaje = (key_exists('languaje', $queryParams)) ? $queryParams['languaje'] : null;
        $clanlog = (key_exists('clanlog', $queryParams)) ? $queryParams['clanlog'] : null;
        $kick = (key_exists('kick', $queryParams)) ? $queryParams['kick'] : null;
        $readypvp = (key_exists('readypvp', $queryParams)) ? $queryParams['readypvp'] : null;
        $walkeralarm = (key_exists('walkeralarm', $queryParams)) ? $queryParams['walkeralarm'] : null;

        try {
            $logboolean = $clanlog == 'true' ? 1 : 0;
            $kickboolean  = $kick  == 'true' ? 1 : 0;
            $readyboolean  = $readypvp  == 'true' ? 1 : 0;
            $alarmboolean  = $walkeralarm  == 'true' ? 1 : 0;

            $connection = new BDConnection();
            $dbh = $connection->getCon();

            $dbh = $connection->getCon();
            $stmt = $dbh->prepare("insert into botconfigs(serverdiscordid,botlanguaje,readclanlog,automatickick,setnotreadypvp,walkeralarm) values(:discordserver,:languaje,:clanlog,:kick,:notreadypvp,:walkeralarm) ON DUPLICATE KEY UPDATE botlanguaje=:languajeu, readclanlog=:clanlogu, automatickick=:kicku, setnotreadypvp=:notreadypvpu, walkeralarm=:walkeralarmu");
            $stmt->bindParam(':discordserver', $discordid);
            $stmt->bindParam(':languaje', $languaje);
            $stmt->bindParam(':clanlog', $logboolean);
            $stmt->bindParam(':kick', $kickboolean);
            $stmt->bindParam(':notreadypvp', $readyboolean);
            $stmt->bindParam(':walkeralarm', $alarmboolean);
            $stmt->bindParam(':languajeu', $languaje);
            $stmt->bindParam(':clanlogu', $logboolean);
            $stmt->bindParam(':kicku', $kickboolean);
            $stmt->bindParam(':notreadypvpu', $readyboolean);
            $stmt->bindParam(':walkeralarmu', $alarmboolean);
            $stmt->execute();

            $body = $response->getBody();
            $body->rewind();
            $body->write(json_encode(array('Success' => 'Config updated')));
            return $response->withStatus(200);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }
}
