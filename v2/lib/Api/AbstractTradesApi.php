<?php

/**
 * Stiletto API
 * PHP version 7.3
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.9.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractTradesApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractTradesApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * POST createTrade
     * Summary: createTrade
     * Notes: Create a trade
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createTrade(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $amount = (key_exists('amount', $queryParams)) ? $queryParams['amount'] : null;
        $quality = (key_exists('quality', $queryParams)) ? $queryParams['quality'] : null;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        $price = (key_exists('price', $queryParams)) ? $queryParams['price'] : null;
        $message = "How about implementing createTrade as a POST method in OpenAPIServer\Api\TradesApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST createTradefromBot
     * Summary: createTradeFromBot
     * Notes: Create a trade
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function createTradefromBot(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordid = (key_exists('discordid', $queryParams)) ? $queryParams['discordid'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $amount = (key_exists('amount', $queryParams)) ? $queryParams['amount'] : null;
        $quality = (key_exists('quality', $queryParams)) ? $queryParams['quality'] : null;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        $price = (key_exists('price', $queryParams)) ? $queryParams['price'] : null;
        $message = "How about implementing createTradefromBot as a POST method in OpenAPIServer\Api\TradesApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * DELETE deleteTrade
     * Summary: deleteTrade
     * Notes: Remove an trade
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteTrade(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $tradeId = $args['tradeId'];
        $message = "How about implementing deleteTrade as a DELETE method in OpenAPIServer\Api\TradesApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getTrades
     * Summary: getTrades
     * Notes: Returns all trades
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getTrades(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : null;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $resource = (key_exists('resource', $queryParams)) ? $queryParams['resource'] : null;
        $region = (key_exists('region', $queryParams)) ? $queryParams['region'] : null;
        $message = "How about implementing getTrades as a GET method in OpenAPIServer\Api\TradesApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
