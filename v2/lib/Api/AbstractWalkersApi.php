<?php

/**
 * Stiletto API
 * PHP version 7.3
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.9.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractWalkersApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractWalkersApi
{

    /**
     * @var ContainerInterface|null Slim app container instance
     */
    protected $container;

    /**
     * Route Controller constructor receives container
     *
     * @param ContainerInterface|null $container Slim app container instance
     */
    public function __construct(ContainerInterface $container = null)
    {
        $this->container = $container;
    }


    /**
     * DELETE deleteWalker
     * Summary: deleteWalker
     * Notes: Remove a walker
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function deleteWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $walkerId = $args['walkerId'];
        $message = "How about implementing deleteWalker as a DELETE method in OpenAPIServer\Api\WalkersApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * PUT editWalker
     * Summary: editWalker
     * Notes: You can edit the information of a walker, it is specially created to update the data of the discord log and assign an owner to a walker
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function editWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $walkerId = $args['walkerId'];
        $queryParams = $request->getQueryParams();
        $owner = (key_exists('owner', $queryParams)) ? $queryParams['owner'] : null;
        $use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $description = (key_exists('description', $queryParams)) ? $queryParams['description'] : null;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : null;
        $message = "How about implementing editWalker as a PUT method in OpenAPIServer\Api\WalkersApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getDiscordServers
     * Summary: getDiscordServers
     * Notes: Return the discord servers it owns
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getDiscordServers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $code = (key_exists('code', $queryParams)) ? $queryParams['code'] : null;
        $redirect = (key_exists('redirect', $queryParams)) ? $queryParams['redirect'] : null;
        $message = "How about implementing getDiscordServers as a GET method in OpenAPIServer\Api\WalkersApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getWalkers
     * Summary: Return all walkers from clan
     * Notes: Return walkers from a clan
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getWalkers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $owner = (key_exists('owner', $queryParams)) ? $queryParams['owner'] : null;
        $lastuser = (key_exists('lastuser', $queryParams)) ? $queryParams['lastuser'] : null;
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : null;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : null;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : null;
        $use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $message = "How about implementing getWalkers as a GET method in OpenAPIServer\Api\WalkersApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST linkServer
     * Summary: linkServer
     * Notes: Link a discord server to the clan
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function linkServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordserverid = (key_exists('discordserverid', $queryParams)) ? $queryParams['discordserverid'] : null;
        $message = "How about implementing linkServer as a POST method in OpenAPIServer\Api\WalkersApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
