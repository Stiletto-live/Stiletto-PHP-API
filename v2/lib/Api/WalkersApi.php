<?php

/**
 * Stiletto API
 * PHP version 7.2
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.0.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace OpenAPIServer\Api;

use Psr\Container\ContainerInterface;
use OpenAPIServer\Api\AbstractWalkersApi;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;
use \Slim\Http\Response as Response;
use PDO;
use OpenAPIServer\BDConnection;
use OpenAPIServer\DiscordApi;

class WalkersApi extends AbstractWalkersApi
{

    /**
     * DELETE deleteWalker
     * Summary: Delete the walker
     * Notes: Remove a walker
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function deleteWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $walkerId = $args['walkerId'];

        try {
            $dataUser = $request->getAttribute('authenticated_user');
            $connection = new BDConnection();
            if ($dataUser != null && $dataUser['serverdiscord'] != null && ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'walkers'))) {
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("delete from walkers where walkerID=:walkerId and discorid=:serverdiscord");
                $stmt->bindParam(':walkerId', $walkerId);
                $stmt->bindParam(':serverdiscord', $dataUser['serverdiscord']);
                $stmt->execute();
    
                return $response->withStatus(204);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * PUT editWalker
     * Summary: To edit the walker
     * Notes: You can edit the information of a walker, it is specially created to update the data of the discord log and assign an owner to a walker
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function editWalker(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $walkerId = $args['walkerId'];
        $queryParams = $request->getQueryParams();
        $owner = (key_exists('owner', $queryParams)) ? $queryParams['owner'] : null;
        $use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;
        $description = (key_exists('description', $queryParams)) ? $queryParams['description'] : null;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : 0;

        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && strlen($description) < 255 && strlen($type) < 50 && strlen($owner) < 255 && strlen($use) < 50) {

                $isready = $ready == 'true' ? 1 : 0;
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                if ($dataUser['leaderid'] == $dataUser['discordid'] || $connection->hasPermission($dataUser["clanid"], $dataUser['discordid'], 'walkers')) {
                    $stmt = $dbh->prepare("update walkers set ownerUser=:owner, walker_use=:use, type=:type, description=:description, isReady=:ready where walkerID=:walkerid");
                } else {
                    $stmt = $dbh->prepare("update walkers set ownerUser=:owner, walker_use=:use, type=:type, description=:description, isReady=:ready where walkerID=:walkerid and (ownerUser=:oldowner or lastUser=:lastuser)");
                    $stmt->bindParam(':oldowner', $dataUser['nickname']);
                    $stmt->bindParam(':lastuser', $dataUser['nickname']);
                }

                $stmt->bindParam(':walkerid', $walkerId);
                $stmt->bindParam(':owner', $owner);
                $stmt->bindParam(':use', $use);
                $stmt->bindParam(':type', $type);
                $stmt->bindParam(':description', $description);
                $stmt->bindParam(':ready', $isready);
                $stmt->execute();
    
                return $response->withStatus(202);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getDiscordServers
     * Summary: getDiscordServers
     * Notes: Return the discord servers it owns
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getDiscordServers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $code = (key_exists('code', $queryParams)) ? $queryParams['code'] : null;
        $redirect = (key_exists('redirect', $queryParams)) ? $queryParams['redirect'] : null;
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && $dataUser['leaderid'] == $dataUser['discordid']) {
                $discordapi = new DiscordApi($_ENV['DISCORD_CLIENT_ID'],$_ENV['DISCORD_CLIENT_SECRET'],$redirect);

                $accessToken = $discordapi->get_access_token($code);
                $user = $discordapi->get_userWithToken($accessToken);
                if (!empty($user)) {
                    $user_discord_id = $user->id;
                    $all = [];

                    if ($user_discord_id != null) {
                        $connection = new BDConnection();
                        $dbh = $connection->getCon();
                        $guilds = $discordapi->get_guildsWithToken($accessToken);
                        $stmt = $dbh->prepare("delete from userdiscordserver where userdiscordid=:discordid");
                        $stmt->bindParam(':discordid', $dataUser['discordid']);
                        $stmt->execute();
                        foreach ($guilds as $guild) {
                            $isAdmin = ($guild->permissions & 0x8) != 0;
                            if ($isAdmin) {
                                array_push($all, $guild);
                                $stmt = $dbh->prepare("insert into userdiscordserver(userdiscordid,serverdiscordid) values(:discordid,:serverid)");
                                $stmt->bindParam(':discordid', $dataUser['discordid']);
                                $stmt->bindParam(':serverid', $guild->id);
                                $stmt->execute();
                            }
                        }
                        $body = $response->getBody();
                        $body->rewind();
                        $body->write(json_encode($all));
                        return $response->withStatus(202);
                    }
                }
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * GET getWalkers
     * Summary: Return all walkers from discord server
     * Notes: Return walkers from a discord server
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function getWalkers(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $name = (key_exists('name', $queryParams)) ? '%'.$queryParams['name'].'%' : null;
        $owner = (key_exists('owner', $queryParams)) ? '%'.$queryParams['owner'].'%' : null;
        $lastuser = (key_exists('lastuser', $queryParams)) ? '%'.$queryParams['lastuser'].'%' : null;
        $walkerid = (key_exists('walkerid', $queryParams)) ? $queryParams['walkerid'] : null;
        $pageSize = (key_exists('pageSize', $queryParams)) ? $queryParams['pageSize'] : 100;
        $ready = (key_exists('ready', $queryParams)) ? $queryParams['ready'] : null;
        $page = (key_exists('page', $queryParams)) ? $queryParams['page'] : 1;
        $walker_use = (key_exists('use', $queryParams)) ? $queryParams['use'] : null;
        $des = (key_exists('desc', $queryParams)) ? '%'.$queryParams['desc'].'%' : null;
        $type = (key_exists('type', $queryParams)) ? $queryParams['type'] : null;

        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($dataUser != null && $dataUser['clanid'] != null) {
                if ($pageSize < 0) {
                    $pageSize = 10;
                }
                if ($page < 0) {
                    $page = 1;
                }
                
                $offset = ((int) $pageSize * ((int) $page-1));

                $pageize = (int) $pageSize;

                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $sql = "SELECT walkers.walkerID, walkers.name, walkers.ownerUser, walkers.lastUser, walkers.datelastuse, walkers.type, walkers.walker_use, walkers.isReady, walkers.description from walkers, clans where clans.discordid=walkers.discorid and clans.clanid=:clanid";

                if ($name != null) {
                    $sql .= " and walkers.name like :walkername";
                }
                if ($owner != null) {
                    $sql .= " and walkers.ownerUser like :owner";
                }
                if ($lastuser != null) {
                    $sql .= " and walkers.lastUser like :lastuser";
                }
                if ($walkerid != null) {
                    $sql .= " and walkers.walkerID=:walkerid";
                }
                if ($ready != null) {
                    $sql .= " and walkers.isReady=:ready";
                }
                if ($walker_use != null) {
                    $sql .= " and walkers.walker_use=:walkeruse";
                }
                if ($des != null) {
                    $sql .= " and walkers.description like :des";
                }
                if ($type != null) {
                    $sql .= " and walkers.type=:type";
                }

                $sql .= " ORDER BY walkers.datelastuse DESC LIMIT :pagesize OFFSET :page";

                $stmt = $dbh->prepare($sql);
                $stmt->bindParam(':clanid', $dataUser['clanid']);
                $stmt->bindParam(':pagesize', $pageize, PDO::PARAM_INT);
                $stmt->bindParam(':page', $offset, PDO::PARAM_INT);

                if ($name != null) {
                    $stmt->bindParam(':walkername', $name);
                }
                if ($owner != null) {
                    $stmt->bindParam(':owner', $owner, PDO::PARAM_STR);
                }
                if ($lastuser != null) {
                    $stmt->bindParam(':lastuser', $lastuser, PDO::PARAM_STR);
                }
                if ($walkerid != null) {
                    $stmt->bindParam(':walkerid', $walkerid, PDO::PARAM_INT);
                }
                if ($ready != null) {
                    $stmt->bindParam(':ready', $ready);
                }
                if ($walker_use != null) {
                    $stmt->bindParam(':walkeruse', $walker_use, PDO::PARAM_STR);
                }
                if ($des != null) {
                    $stmt->bindParam(':des', $des, PDO::PARAM_STR);
                }
                if ($type != null) {
                    $stmt->bindParam(':type', $type, PDO::PARAM_STR);
                }

                
                $stmt->execute();
                $results = $stmt->fetchAll(PDO::FETCH_ASSOC);

                $body = $response->getBody();
                $body->rewind();
                $body->write(json_encode($results));
                return $response->withStatus(200);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    /**
     * POST linkServer
     * Summary: linkServer
     * Notes: Link a discord server to the clan
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param array|null             $args     Path arguments
     *
     * @return ResponseInterface
     */
    public function linkServer(ServerRequestInterface $request, ResponseInterface $response, array $args)
    {
        $queryParams = $request->getQueryParams();
        $discordserverid = (key_exists('discordserverid', $queryParams)) ? $queryParams['discordserverid'] : null;
        
        try {
            $dataUser = $request->getAttribute('authenticated_user');
            if ($discordserverid != null && $dataUser != null && $dataUser['leaderid'] == $dataUser['discordid']) {
                $connection = new BDConnection();
                $dbh = $connection->getCon();

                $stmt = $dbh->prepare("select * from userdiscordserver where userdiscordid=:discordid and serverdiscordid=:serverid");
                $stmt->bindParam(':discordid', $dataUser['discordid']);
                $stmt->bindParam(':serverid', $discordserverid);
                $stmt->setFetchMode(PDO::FETCH_ASSOC);
                $stmt->execute();
                if ($stmt->rowCount() > 0) {
                    $stmt = $dbh->prepare("update clans set discordid=:discordserverid where clanid=:clanid");
                    $stmt->bindParam(':discordserverid', $discordserverid);
                    $stmt->bindParam(':clanid', $dataUser['clanid']);
                    $stmt->execute();
                    
                    $body = $response->getBody();
                    $body->rewind();
                    $body->write(json_encode(array('Success' => 'Edited clan')));
                    return $response->withStatus(202);
                }
                return $response->withStatus(403);
            }
            return $response->withStatus(401);
        } catch (PDOException $e){
            return $response->withStatus(503);
        }
    }

    public function getUserData(String $discordid, String $token) {
        try {
            $connection = new BDConnection();
            $connection->updateDateUser($discordid);
            
            $dbh = $connection->getCon();
            $stmt = $dbh->prepare("select users.discordid, users.nickname, users.discordtag, users.clanid, clans.leaderid, clans.discordid serverdiscord from users left join clans on users.clanid=clans.clanid where users.discordid=:discordid and users.token=:token");
            $stmt->bindParam(':discordid', $discordid);
            $stmt->bindParam(':token', $token);
            $stmt->setFetchMode(PDO::FETCH_ASSOC);
            $stmt->execute();
            if ($stmt->rowCount() <= 0) {
                return null;
            } else {
                while ($row = $stmt->fetch()){
                    $dataUser = $row;
                }
                return $dataUser;
            }
        } catch (PDOException $e){
            return null;
        }
        return null;
    }
}
