<?php

/**
 * Stiletto API
 * PHP version 7.3
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * API for [Stiletto Web](https://github.com/dm94/stiletto-web)
 * The version of the OpenAPI document: 2.9.0
 * Contact: dm94official@hotmail.es
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use Slim\Factory\AppFactory;
use Slim\Interfaces\RouteInterface;
use Slim\Exception\HttpNotImplementedException;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Dyorg\TokenAuthentication;
use Dyorg\TokenAuthentication\TokenSearch;
use Psr\Http\Message\ServerRequestInterface;
use OpenAPIServer\Middleware\JsonBodyParserMiddleware;
use OpenAPIServer\Mock\OpenApiDataMocker;
use OpenAPIServer\Mock\OpenApiDataMockerRouteMiddleware;
use Slim\Psr7\Factory\ResponseFactory;
use Exception;

/**
 * SlimRouter Class Doc Comment
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /** @var App instance */
    private $slimApp;

    /** @var array[] list of all api operations */
    private $operations = [
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/walkers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'addWalker',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Walker created"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/config',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'getBotConfigs',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/BotConfig"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "discordid" : "string",
            "botLanguaje" : "en",
            "readClanLog" : true,
            "automaticKick" : false,
            "setNotReadyPVP" : false
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/walkers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'getWalkersByServer',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Walker"
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'addTechByBot',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/config/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'getDiscordConfigByServer',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/BotConfig"
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'getWhoHasLearn',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
          'httpMethod' => 'GET',
          'basePathWithoutHost' => '/v2',
          'path' => '/bot/{discordid}/relationships',
          'apiPackage' => 'OpenAPIServer\Api',
          'classname' => 'AbstractBotApi',
          'userClassname' => 'BotApi',
          'operationId' => 'getRelationshipsByBot',
          'responses' => [
              '200' => [
                  'jsonSchema' => '{
"description" : "OK"
}',
              ],
              '401' => [
                  'jsonSchema' => '{
"description" : "Unauthorized"
}',
              ],
              '503' => [
                  'jsonSchema' => '{
"description" : "Error connecting to database",
"content" : {
  "application/json" : {
    "schema" : {
      "$ref" : "#/components/schemas/inline_response_503"
    },
    "examples" : {
      "example-1" : {
        "value" : {
          "Error" : "Error connecting to database"
        }
      }
    }
  }
}
}',
              ],
          ],
          'authMethods' => [
              // apiKey security schema named 'apiKey'
              [
                  'type' => 'apiKey',
                  'isBasic' => false,
                  'isBearer' => false,
                  'isApiKey' => true,
                  'isOAuth' => false,
                  'keyParamName' => 'apikey',
                  'isKeyInHeader' => true,
                  'isKeyInQuery' => false,
                  'isKeyInCookie' => false,
              ],
          ],
      ],
      [
        'httpMethod' => 'GET',
        'basePathWithoutHost' => '/v2',
        'path' => '/bot/{discordid}/members',
        'apiPackage' => 'OpenAPIServer\Api',
        'classname' => 'AbstractBotApi',
        'userClassname' => 'BotApi',
        'operationId' => 'getMembersPermisionsBot',
        'responses' => [
            '200' => [
                'jsonSchema' => '{
"description" : "OK"
}',
            ],
            '401' => [
                'jsonSchema' => '{
"description" : "Unauthorized"
}',
            ],
            '503' => [
                'jsonSchema' => '{
"description" : "Error connecting to database",
"content" : {
"application/json" : {
  "schema" : {
    "$ref" : "#/components/schemas/inline_response_503"
  },
  "examples" : {
    "example-1" : {
      "value" : {
        "Error" : "Error connecting to database"
      }
    }
  }
}
}
}',
            ],
        ],
        'authMethods' => [
            // apiKey security schema named 'apiKey'
            [
                'type' => 'apiKey',
                'isBasic' => false,
                'isBearer' => false,
                'isApiKey' => true,
                'isOAuth' => false,
                'keyParamName' => 'apikey',
                'isKeyInHeader' => true,
                'isKeyInQuery' => false,
                'isKeyInCookie' => false,
            ],
        ],
    ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/clans/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'kickFromClan',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "No Content"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Not Found"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/clans/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'linkClan',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '500' => [
                    'jsonSchema' => '{
  "description" : "Internal Server Error"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/walkers/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'botEditWalker',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/config/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractBotApi',
            'userClassname' => 'BotApi',
            'operationId' => 'updateBotConfigByServer',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Accepted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'createClan',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Clan created"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "These connection data are wrong"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "You already have a clan"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getClans',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "JSON array with the list of clans",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_202_1"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "clanid" : 0,
            "clanname" : "Example Clan",
            "discordid" : "000000000000000",
            "leaderid" : "000000000000000000",
            "invitelink" : "PdXxUWd",
            "recruitment" : false,
            "flagcolor" : "#e3f218",
            "discordTag" : "DEMO#0000"
          } ]
        }
      }
    }
  }
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'leaveClan',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "No Content"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "This user cannot be found"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/relationships',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'createRelationship',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "The relationship of diplomacy has been created"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "Method Not Allowed"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'deleteClan',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The clan has been successfully deleted"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "You do not have the necessary powers to take this action"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/relationships/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'deleteRelationship',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "Relationship deleted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getClanInfo',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of user in the clan",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_200"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "discordid" : "000000000000000000",
            "nickname" : "TEST USER",
            "discordTag" : "DEMO#0000",
            "leaderid" : "000000000000000000",
            "symbol" : "string"
          }
        }
      }
    }
  }
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/discordbot',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getDiscordConfig',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/BotConfig"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "discordid" : "5345345345435",
            "botLanguaje" : "en",
            "readClanLog" : true,
            "automaticKick" : false,
            "setNotReadyPVP" : false
          }
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members/{memberid}/permissions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getMemberPermissions',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getMembers',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of user in the clan",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_202_2"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "discordid" : "000000000000000000",
            "nickname" : "TEST USER",
            "discordTag" : "DEMO#0000",
            "leaderid" : "000000000000000000"
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "These connection data are wrong"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "Method Not Allowed"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/relationships',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getRelationships',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of clan relationships",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_202_4"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "leaderid" : "000000000000000000",
            "id" : 0,
            "typed" : 0,
            "flagcolor" : "#e3f218",
            "name" : "Example Clan"
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "You have to add the data requested by the API. Needs discordid and token"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "Method Not Allowed"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/requests',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'getRequests',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of user requests",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_202_3"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "discordid" : "000000000000000000",
            "nickname" : "TEST USER",
            "discordTag" : "DEMO#0000",
            "leaderid" : "000000000000000000"
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "You have to add the data requested by the API. Needs discordid and token"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "Method Not Allowed"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/requests',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'sendRequest',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Request created"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "You already have a pending application to join a clan"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/discordbot',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'updateBotConfig',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'updateClan',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members/{memberid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'updateMember',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "The change has been made correctly"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "You do not have the necessary powers to take this action"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members/{memberid}/permissions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'updateMemberPermissions',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Bad Request"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/requests/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClansApi',
            'userClassname' => 'ClansApi',
            'operationId' => 'updateRequest',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "The request has been processed correctly"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '405' => [
                    'jsonSchema' => '{
  "description" : "You do not have the necessary powers to take this action"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clusters',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractClustersApi',
            'userClassname' => 'ClustersApi',
            'operationId' => 'getClusters',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK",
  "content" : {
    "application/json" : {
      "schema" : {
        "minItems" : 1,
        "uniqueItems" : true,
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_200_5"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "region" : "EU",
            "name" : "Lush Realm",
            "clan_limit" : 12,
            "crossplay" : true
          } ]
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clans',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'maps',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/config',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotConfig',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/trades',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotTrades',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/walkers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotWalkers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clusters',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsClusters',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/recipes',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsRecipes',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/trades',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsTrades',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/auth',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsUsersAuth',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsWalkers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/auth',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsWalkersAuth',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'users',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/discordbot',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIddiscordbot',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdmembers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members/{memberid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdmembersmemberid',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/relationships',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdrelationships',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/relationships/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdrelationshipsid',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/requests/{id}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdrequestid',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/requests',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'clansclanIdrequests',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'mapsmapId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'mapsmapIdresources',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources/{resourceId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'mapsmapIdresourcesresourceId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotClansDiscordidTech',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
          'httpMethod' => 'OPTIONS',
          'basePathWithoutHost' => '/v2',
          'path' => '/bot/{discordid}/members',
          'apiPackage' => 'OpenAPIServer\Api',
          'classname' => 'AbstractDefaultApi',
          'userClassname' => 'DefaultApi',
          'operationId' => 'optionsbotclansdiscordidmembers',
          'responses' => [
              '200' => [
                  'jsonSchema' => '{
"description" : "OK"
}',
              ],
          ],
          'authMethods' => [
          ],
      ],
      [
        'httpMethod' => 'OPTIONS',
        'basePathWithoutHost' => '/v2',
        'path' => '/bot/{discordid}/relationships',
        'apiPackage' => 'OpenAPIServer\Api',
        'classname' => 'AbstractDefaultApi',
        'userClassname' => 'DefaultApi',
        'operationId' => 'optionsbotclansdiscordidrelationships',
        'responses' => [
            '200' => [
                'jsonSchema' => '{
"description" : "OK"
}',
            ],
        ],
        'authMethods' => [
        ],
    ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/config/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotConfigDiscordid',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/clans/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotUsers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/walkers/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsBotWalkersWalkerId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanId}/members/{memberid}/permissions',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsClansClanIdMembersMemberidPermisions',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsClansClanidTech',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/recipes/{recipeToken}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsRecipesRecipeToken',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/trades/{tradeId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsTradesTradeId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsUsersDiscordidTech',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/{walkerId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'optionsWalkersWalkerId',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'OPTIONS',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractDefaultApi',
            'userClassname' => 'DefaultApi',
            'operationId' => 'usersdiscordid',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'addMap',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Map created"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'getMaps',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of maps",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_200_1"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "mapid" : 0,
            "typemap" : "canyon",
            "discordid" : "0000000000000000000",
            "name" : "Example map",
            "dateofburning" : "2020-10-28",
            "pass" : "124567890pass",
            "allowedit" : false
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'addResourceMap',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Resource created"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'deleteMap',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "Map deleted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources/{resourceId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'deleteResource',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "Resource deleted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'editMap',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Map edited"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources/{resourceId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'editResource',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Edited resource"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'getMap',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Not Found"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/maps/{mapId}/resources',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractMapsApi',
            'userClassname' => 'MapsApi',
            'operationId' => 'getResources',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of resources",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_200_2"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "resourceid" : 0,
            "mapid" : 0,
            "resourcetype" : "Aloe",
            "quality" : 0,
            "x" : 120.25,
            "y" : 100.32,
            "token" : "oneToken123",
            "typemap" : "canyon"
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/recipes',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRecipesApi',
            'userClassname' => 'RecipesApi',
            'operationId' => 'addRecipe',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Created",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_201"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "token" : "sdf345",
            "items" : [ {
              "name" : "Barrier Base",
              "count" : 10
            }, {
              "name" : "Cement Foundation",
              "count" : 3
            } ]
          }
        }
      }
    }
  }
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Some data are missing"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/recipes/{recipeToken}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractRecipesApi',
            'userClassname' => 'RecipesApi',
            'operationId' => 'getRecipe',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "JSON array with all items in that recipe",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_200_4"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "token" : "sdf345",
            "items" : [ {
              "name" : "Barrier Base",
              "count" : 10
            }, {
              "name" : "Cement Foundation",
              "count" : 3
            } ]
          }
        }
      }
    }
  }
}',
                ],
                '404' => [
                    'jsonSchema' => '{
  "description" : "Not Found"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTechApi',
            'userClassname' => 'TechApi',
            'operationId' => 'addTech',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTechApi',
            'userClassname' => 'TechApi',
            'operationId' => 'getLearned',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/clans/{clanid}/tech',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTechApi',
            'userClassname' => 'TechApi',
            'operationId' => 'seeWhoHasLearntIt',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "OK"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/trades',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTradesApi',
            'userClassname' => 'TradesApi',
            'operationId' => 'createTrade',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Trade created"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Some data are missing"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "These connection data are wrong"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/bot/trades',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTradesApi',
            'userClassname' => 'TradesApi',
            'operationId' => 'createTradefromBot',
            'responses' => [
                '201' => [
                    'jsonSchema' => '{
  "description" : "Trade created"
}',
                ],
                '400' => [
                    'jsonSchema' => '{
  "description" : "Some data are missing"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "These connection data are wrong"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // apiKey security schema named 'apiKey'
                [
                    'type' => 'apiKey',
                    'isBasic' => false,
                    'isBearer' => false,
                    'isApiKey' => true,
                    'isOAuth' => false,
                    'keyParamName' => 'apikey',
                    'isKeyInHeader' => true,
                    'isKeyInQuery' => false,
                    'isKeyInCookie' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/trades',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTradesApi',
            'userClassname' => 'TradesApi',
            'operationId' => 'getTrades',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "JSON array with the list of trades",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/inline_response_200_3"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "idtrade" : 0,
            "discordid" : "0000000000000000",
            "type" : "Supply",
            "resource" : "Aloe",
            "amount" : 0,
            "quality" : 0,
            "region" : "EU",
            "nickname" : "Dm94Dani",
            "discordtag" : "Dm94Dani#6385"
          } ]
        }
      }
    }
  }
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/trades/{tradeId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractTradesApi',
            'userClassname' => 'TradesApi',
            'operationId' => 'deleteTrade',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "Trade deleted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/auth',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'authDiscord',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Accepted",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_202_5"
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/users',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'getUser',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "A JSON array of user data",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_202"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "nickname" : "TEST USER",
            "discordtag" : "DEMO#0000",
            "clanid" : 0,
            "clanname" : "Example Clan",
            "leaderid" : "000000000000000000"
          }
        }
      }
    }
  }
}',
                ],
                '205' => [
                    'jsonSchema' => '{
  "description" : "This user cannot be found"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'addNick',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "The nick to user has been added correctly"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "These connection data are wrong"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/users/{discordid}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractUsersApi',
            'userClassname' => 'UsersApi',
            'operationId' => 'deleteUser',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "The user has been successfully deleted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/auth',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWalkersApi',
            'userClassname' => 'WalkersApi',
            'operationId' => 'getDiscordServers',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "List of discord servers"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'GET',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWalkersApi',
            'userClassname' => 'WalkersApi',
            'operationId' => 'getWalkers',
            'responses' => [
                '200' => [
                    'jsonSchema' => '{
  "description" : "JSON array with the list of walkers",
  "content" : {
    "application/json" : {
      "schema" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/Walker"
        }
      },
      "examples" : {
        "example-1" : {
          "value" : [ {
            "leaderid" : "000000000000000000",
            "discordid" : "000000000000000000",
            "walkerid" : 0,
            "name" : "dm94dani - 4x4 v2",
            "ownerUser" : "dm94dani",
            "lastuser" : "dm94dani",
            "datelastuse" : "2020-11-18"
          } ]
        },
        "example-2" : {
          "value" : [ {
            "leaderid" : "000000000000000000",
            "discordid" : "string",
            "walkerid" : 0,
            "name" : "dm94dani - 4x4 v2",
            "ownerUser" : "dm94dani",
            "lastuser" : "dm94dani",
            "datelastuse" : "2020-11-18"
          } ]
        }
      }
    }
  }
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "The data entered is incorrect"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'POST',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/auth',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWalkersApi',
            'userClassname' => 'WalkersApi',
            'operationId' => 'linkServer',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Accepted"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
                '403' => [
                    'jsonSchema' => '{
  "description" : "Forbidden"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'DELETE',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/{walkerId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWalkersApi',
            'userClassname' => 'WalkersApi',
            'operationId' => 'deleteWalker',
            'responses' => [
                '204' => [
                    'jsonSchema' => '{
  "description" : "Walker deleted correctly"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Error connecting to database",
  "content" : {
    "application/json" : {
      "schema" : {
        "$ref" : "#/components/schemas/inline_response_503"
      },
      "examples" : {
        "example-1" : {
          "value" : {
            "Error" : "Error connecting to database"
          }
        }
      }
    }
  }
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
        [
            'httpMethod' => 'PUT',
            'basePathWithoutHost' => '/v2',
            'path' => '/walkers/{walkerId}',
            'apiPackage' => 'OpenAPIServer\Api',
            'classname' => 'AbstractWalkersApi',
            'userClassname' => 'WalkersApi',
            'operationId' => 'editWalker',
            'responses' => [
                '202' => [
                    'jsonSchema' => '{
  "description" : "Walker edited correctly"
}',
                ],
                '401' => [
                    'jsonSchema' => '{
  "description" : "Unauthorized"
}',
                ],
                '503' => [
                    'jsonSchema' => '{
  "description" : "Service Unavailable"
}',
                ],
            ],
            'authMethods' => [
                // http security schema named 'token'
                [
                    'type' => 'http',
                    'isBasic' => true,
                    'isBearer' => true,
                    'isApiKey' => false,
                    'isOAuth' => false,
                ],
            ],
        ],
    ];

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $settings Either a ContainerInterface or an associative array of app settings
     *
     * @throws HttpNotImplementedException When implementation class doesn't exists
     * @throws Exception when not supported authorization schema type provided
     */
    public function __construct($settings = [])
    {
        if ($settings instanceof ContainerInterface) {
            // Set container to create App with on AppFactory
            AppFactory::setContainer($settings);
        }
        $this->slimApp = AppFactory::create();

        // middlewares requires Psr\Container\ContainerInterface
        $container = $this->slimApp->getContainer();

        $authPackage = 'OpenAPIServer\Auth';
        $basicAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\BasicAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $apiKeyAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\ApiKeyAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };
        $oAuthAuthenticator = function (ServerRequestInterface &$request, TokenSearch $tokenSearch) use ($authPackage) {
            $message = "How about extending AbstractAuthenticator class by {$authPackage}\OAuthAuthenticator?";
            throw new HttpNotImplementedException($request, $message);
        };

        $userOptions = $this->getSetting($settings, 'tokenAuthenticationOptions', null);

        // mocker options
        $mockerOptions = $this->getSetting($settings, 'mockerOptions', null);
        $dataMocker = $mockerOptions['dataMocker'] ?? new OpenApiDataMocker();
        $responseFactory = new ResponseFactory();
        $getMockStatusCodeCallback = $mockerOptions['getMockStatusCodeCallback'] ?? null;
        $mockAfterCallback = $mockerOptions['afterCallback'] ?? null;

        foreach ($this->operations as $operation) {
            $callback = function ($request, $response, $arguments) use ($operation) {
                $message = "How about extending {$operation['classname']} by {$operation['apiPackage']}\\{$operation['userClassname']} class implementing {$operation['operationId']} as a {$operation['httpMethod']} method?";
                throw new HttpNotImplementedException($request, $message);
            };
            $middlewares = [new JsonBodyParserMiddleware()];

            if (class_exists("\\{$operation['apiPackage']}\\{$operation['userClassname']}")) {
                $callback = "\\{$operation['apiPackage']}\\{$operation['userClassname']}:{$operation['operationId']}";
            }

            foreach ($operation['authMethods'] as $authMethod) {
                switch ($authMethod['type']) {
                    case 'http':
                        $authenticatorClassname = "\\{$authPackage}\\BasicAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $basicAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $basicAuthenticator,
                            'regex' => $authMethod['isBearer'] ? '/Bearer\s+(.*)$/i' : '/Basic\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'apiKey':
                        $authenticatorClassname = "\\{$authPackage}\\ApiKeyAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $apiKeyAuthenticator = new $authenticatorClassname($container);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $apiKeyAuthenticator,
                            'regex' => '/^(.*)$/i',
                            'header' => $authMethod['isKeyInHeader'] ? $authMethod['keyParamName'] : null,
                            'parameter' => $authMethod['isKeyInQuery'] ? $authMethod['keyParamName'] : null,
                            'cookie' => $authMethod['isKeyInCookie'] ? $authMethod['keyParamName'] : null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    case 'oauth2':
                        $authenticatorClassname = "\\{$authPackage}\\OAuthAuthenticator";
                        if (class_exists($authenticatorClassname)) {
                            $oAuthAuthenticator = new $authenticatorClassname($container, $authMethod['scopes']);
                        }

                        $middlewares[] = new TokenAuthentication($this->getTokenAuthenticationOptions([
                            'authenticator' => $oAuthAuthenticator,
                            'regex' => '/Bearer\s+(.*)$/i',
                            'header' => 'Authorization',
                            'parameter' => null,
                            'cookie' => null,
                            'argument' => null,
                        ], $userOptions));
                        break;
                    default:
                        throw new Exception('Unknown authorization schema type');
                }
            }

            if (is_callable($getMockStatusCodeCallback)) {
                $mockSchemaResponses = array_map(function ($item) {
                    return json_decode($item['jsonSchema'], true);
                }, $operation['responses']);
                $middlewares[] = new OpenApiDataMockerRouteMiddleware($dataMocker, $mockSchemaResponses, $responseFactory, $getMockStatusCodeCallback, $mockAfterCallback);
            }

            $this->addRoute(
                [$operation['httpMethod']],
                "{$operation['basePathWithoutHost']}{$operation['path']}",
                $callback,
                $middlewares
            )->setName($operation['operationId']);
        }
    }

    /**
     * Merges user defined options with dynamic params
     *
     * @param array $staticOptions Required static options
     * @param array $userOptions   User options
     *
     * @return array Merged array
     */
    private function getTokenAuthenticationOptions(array $staticOptions, array $userOptions = null)
    {
        if (is_array($userOptions) === false) {
            return $staticOptions;
        }

        return array_merge($userOptions, $staticOptions);
    }

    /**
     * Returns app setting by name.
     *
     * @param ContainerInterface|array $settings    Either a ContainerInterface or an associative array of app settings
     * @param string                   $settingName Setting name
     * @param mixed                    $default     Default setting value.
     *
     * @return mixed
     */
    private function getSetting($settings, $settingName, $default = null)
    {
        if ($settings instanceof ContainerInterface && $settings->has($settingName)) {
            return $settings->get($settingName);
        } elseif (is_array($settings) && array_key_exists($settingName, $settings)) {
            return $settings[$settingName];
        }

        return $default;
    }

    /**
     * Add route with multiple methods
     *
     * @param string[]        $methods     Numeric array of HTTP method names
     * @param string          $pattern     The route URI pattern
     * @param callable|string $callable    The route callback routine
     * @param array|null      $middlewares List of middlewares
     *
     * @return RouteInterface
     *
     * @throws InvalidArgumentException If the route pattern isn't a string
     */
    public function addRoute(array $methods, string $pattern, $callable, $middlewares = [])
    {
        $route = $this->slimApp->map($methods, $pattern, $callable);
        foreach ($middlewares as $middleware) {
            $route->add($middleware);
        }
        return $route;
    }

    /**
     * Returns Slim Framework instance
     *
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
